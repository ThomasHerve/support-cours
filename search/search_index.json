{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li>Linux: Cours sur linux.</li> <li>Docker: Cours sur docker.</li> </ul> <p>Mon email pour les rendus: therve38@gmail.com</p>"},{"location":"docker/","title":"Travaux Pratiques","text":""},{"location":"docker/#docker","title":"Docker","text":""},{"location":"docker/#introduction","title":"Introduction","text":"<ul> <li>TP: Introduction: Installation de docker.</li> <li>TP: Base: Base de docker.</li> <li>TP: Volumes: Montage de volume.</li> <li>TP: Exec: Commande docker exec</li> </ul>"},{"location":"docker/#creation-dimage","title":"Cr\u00e9ation d'image","text":"<ul> <li>TP: Dockerfile Cr\u00e9ation d'une image.</li> <li>TP: Dockerfile 2 Cr\u00e9ation d'une image web.</li> </ul>"},{"location":"docker/#docker-compose","title":"Docker compose","text":"<ul> <li>TP: Docker compose Introduction \u00e0 docker compose.</li> </ul>"},{"location":"docker/cours/base/","title":"Introduction \u00e0 l'Installation de Docker sur Linux et Windows","text":""},{"location":"docker/cours/base/#partie-1-docker-cest-quoi-en-fait","title":"Partie 1: Docker c'est quoi en fait ?","text":"<p>Docker permet d'empacter ses applications sous forme d'image et de les partager \u00e0 n'importe qui. Imaginez cela comme un .exe d'un windows, \u00e0 la difference que l'image peut tourner n'importe o\u00f9 et que vous embarquez pas juste du code source, mais tout un syst\u00e8me ! cela permet de d\u00e9ployer une base de donn\u00e9e en quelque secondes par exemple, vous \u00e9pargnant une longue installation et une potentiel pollution de votre syst\u00e8me, car les conteneurs dockers sont completement isol\u00e9s, exit fichiers d'installations et autres cl\u00e9 de registres.</p> <ol> <li> <p>Les images</p> <p>Les images sont tout simplement le \"binaire\". C'est \u00e0 dire que vous pouvez les t\u00e9l\u00e9charger ou les publier, mais en tant que tel ce n'est que de la donn\u00e9e.</p> </li> <li> <p>Les conteneurs</p> <p>Un conteneur est l'execution d'une image. Vous pouvez ensuite interagir avec comme nous allons voir dans la suite de ce cours.</p> </li> </ol>"},{"location":"docker/cours/base/#partie-2-les-images","title":"Partie 2: Les images","text":"<p>Ces derni\u00e8res sont t\u00e9l\u00e9chargeable gratuitement sur Docker hub.  </p>"},{"location":"docker/cours/base/#etape-21-telecharger-une-image","title":"\u00c9tape 2.1 : T\u00e9l\u00e9charger une image","text":"<p>Vous pouvez t\u00e9l\u00e9charger l'image d'exemple que nous allons executer dans la suite de ce cours: <pre><code>docker pull sevenajay/mario\n</code></pre></p> <p>Il est possible de t\u00e9l\u00e9charg\u00e9 une version sp\u00e9cifique d'une image de cette mani\u00e8re, on appelle ces derni\u00e8res des <code>tag</code>:</p> <pre><code>docker pull &lt;NOM IMAGE&gt;:&lt;TAG&gt;\n</code></pre>"},{"location":"docker/cours/base/#etape-22-listez-vos-images","title":"\u00c9tape 2.2 : Listez vos images","text":"<p>Vous pouvez voir vos images t\u00e9l\u00e9charg\u00e9s gr\u00e2ce \u00e0  <pre><code>docker image ls\n</code></pre></p> <ul> <li>Exercice: Allez sur docker hub et trouvez une image mysql. T\u00e9l\u00e9chargez l\u00e0 et trouvez l\u00e0 dans la liste de vos images.</li> <li>Exercice: Trouvez comment pull sp\u00e9cifiquement l'image de mysql 5. T\u00e9l\u00e9chargez l\u00e0 et trouvez l\u00e0 dans la liste de vos images.</li> </ul>"},{"location":"docker/cours/base/#partie-3-executer-un-conteneur","title":"Partie 3: executer un conteneur","text":""},{"location":"docker/cours/base/#etape-31-docker-run","title":"\u00c9tape 3.1 : Docker run","text":"<p>Il faut maintenant pouvoir executer votre image. la commande de base est <pre><code>docker run &lt;NOM-IMAGE&gt;\n</code></pre> Vous pouvez constater ce que fais cette commande avec l'image de d\u00e9mo par defaut de docker: <pre><code>docker run hello-world\n</code></pre></p> <p>Info</p> <p>Notons que si l'image n'a pas \u00e9t\u00e9 d\u00e9j\u00e0 t\u00e9l\u00e9charg\u00e9e elle l'est au d\u00e9marrage de la commande.</p>"},{"location":"docker/cours/base/#etape-32-mapping-de-ports","title":"\u00c9tape 3.2 : Mapping de ports","text":"<p>Bon en l'\u00e9tat votre conteneur ne pourra pas faire grand chose, en g\u00e9n\u00e9ral nous voulons pouvoir acceder \u00e0 l'application qui tourne dedans via un port. Par exemple quand vous d\u00e9v\u00e9loppez dans un framework, vous allez executer une commande pour faire tourner votre site web et y acceder via <code>localhost:&lt;PORT UTILISE PAR LE FRAMEWORK&gt;</code>.  </p> <p>Nous pouvons donc utiliser le mapping de ports. Le concept est simple: li\u00e9 un port de votre conteneur \u00e0 votre ordinateur. pour ce faire nous utilisons l'option <code>-p &lt;NUMERO PORT ORDINATEUR&gt;:&lt;NUMERO PORT CONTENEUR&gt;</code>.  </p> <p>Prenons pour exemple l'image t\u00e9l\u00e9charg\u00e9 pr\u00e9cedemment. C'est une reproduction du jeu mario bros d\u00e9velopp\u00e9 en javascript et fait pour tourner dans un navigateur, de base sur le port 80. Ex\u00e9cutez la de cette mani\u00e8re:</p> <pre><code>docker run -p 8080:80 sevenajay/mario\n</code></pre> <p>connectez vous \u00e0 <code>localhost:8080</code> dans votre navigateur pour constater que le jeu apparait (Aller vous avez bien droit \u00e0 une petite partie avant de passer \u00e0 la suite).</p> <ul> <li>Exercice: Faite tourner le jeu sur un autre port que le port 8080. </li> </ul>"},{"location":"docker/cours/base/#etape-33-execution-en-arriere-plan","title":"\u00c9tape 3.3 : execution en arri\u00e8re plan","text":"<p>Vous pouvez executer une image en arri\u00e8re plan avec l'option <code>-d</code>.  </p> <ul> <li>Exercice: Executez l'image mario en arri\u00e8re plan.</li> </ul>"},{"location":"docker/cours/base/#etape-34-liste-arret-reprise-et-suppression","title":"\u00c9tape 3.4 : liste, arret reprise et suppression","text":"<p>Vous pouvez lister les conteneurs tournant sur votre machine avec:  </p> <pre><code>docker ps\n</code></pre> <p>Vous pouvez stopper un conteneur de cette mani\u00e8re:</p> <pre><code>docker stop &lt;NOM OU ID DU CONTENEUR&gt;\n</code></pre> <p>Vous pouvez relancer un conteneur stopp\u00e9 avec:  </p> <pre><code>docker start &lt;NOM OU ID DU CONTENEUR&gt;\n</code></pre> <p>Vous pouvez supprimer un conteneur stopp\u00e9 avec: <pre><code>docker rm &lt;NOM OU ID DU CONTENEUR&gt;\n</code></pre></p> <ul> <li>Exercice: Stoppez, relancez puis supprimez le conteneur mario, en constatant l'accessibilit\u00e9 dans votre navigateur \u00e0 chaque \u00e9tape.</li> </ul>"},{"location":"docker/cours/docker-compose/","title":"Introduction \u00e0 docker compose","text":""},{"location":"docker/cours/docker-compose/#introduction","title":"Introduction","text":"<p>Docker Compose est un outil permettant de d\u00e9finir et ex\u00e9cuter des applications multi-conteneurs \u00e0 l'aide d'un fichier de configuration YAML. Au lieu de lancer plusieurs conteneurs manuellement avec <code>docker run</code>, Docker Compose simplifie le processus en g\u00e9rant les services, les volumes et les r\u00e9seaux en une seule commande.</p>"},{"location":"docker/cours/docker-compose/#partie-1-installation-de-docker-compose","title":"Partie 1 : Installation de Docker Compose","text":"<p>Docker Compose est inclus par d\u00e9faut avec Docker Desktop. Sur Linux, il peut \u00eatre install\u00e9 s\u00e9par\u00e9ment.</p>"},{"location":"docker/cours/docker-compose/#etape-11-verifier-si-docker-compose-est-installe","title":"\u00c9tape 1.1 : V\u00e9rifier si Docker Compose est install\u00e9","text":"<p><pre><code>docker compose version\n</code></pre> Sortie attendue : <pre><code>Docker Compose version vX.X.X\n</code></pre></p>"},{"location":"docker/cours/docker-compose/#etape-12-installer-docker-compose-si-absent","title":"\u00c9tape 1.2 : Installer Docker Compose (si absent)","text":"<p>Sur Ubuntu / Debian : <pre><code>sudo apt update &amp;&amp; sudo apt install docker-compose -y\n</code></pre> Sur CentOS / RedHat : <pre><code>sudo yum install docker-compose -y\n</code></pre> Sur SUSE : <pre><code>sudo zypper install docker-compose\n</code></pre></p>"},{"location":"docker/cours/docker-compose/#partie-2-premier-projet-avec-docker-compose","title":"Partie 2 : Premier Projet avec Docker Compose","text":"<p>Nous allons cr\u00e9er un fichier <code>docker-compose.yml</code> pour ex\u00e9cuter un serveur web Nginx avec une page HTML personnalis\u00e9e.</p>"},{"location":"docker/cours/docker-compose/#etape-21-creer-larborescence-du-projet","title":"\u00c9tape 2.1 : Cr\u00e9er l'arborescence du projet","text":"<pre><code>mkdir mon-projet-compose\ncd mon-projet-compose\nmkdir html\n</code></pre>"},{"location":"docker/cours/docker-compose/#etape-22-ajouter-un-fichier-html","title":"\u00c9tape 2.2 : Ajouter un fichier HTML","text":"<pre><code>echo \"&lt;h1&gt;Bienvenue sur mon serveur Nginx avec Docker Compose !&lt;/h1&gt;\" &gt; html/index.html\n</code></pre>"},{"location":"docker/cours/docker-compose/#etape-23-ecrire-le-fichier-docker-composeyml","title":"\u00c9tape 2.3 : \u00c9crire le fichier <code>docker-compose.yml</code>","text":"<p>Cr\u00e9ez un fichier <code>docker-compose.yml</code> : <pre><code>nano docker-compose.yml\n</code></pre></p> <p>Ajoutez ce contenu : <pre><code>services:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n</code></pre></p> <p>Explication : - D\u00e9finit un service <code>web</code> bas\u00e9 sur l\u2019image <code>nginx:latest</code>. - Mappe le port <code>8080</code> du PC vers le port <code>80</code> du conteneur. - Monte le dossier <code>html/</code> dans <code>/usr/share/nginx/html</code> pour servir notre page.  </p> <p>Info</p> <p>la commande docker equivalente serait <code>docker run -p 8080:80 -v ./html:/usr/share/nginx/html nginx:latest</code></p>"},{"location":"docker/cours/docker-compose/#partie-3-lancer-et-tester-lapplication","title":"Partie 3 : Lancer et Tester l'Application","text":""},{"location":"docker/cours/docker-compose/#etape-31-demarrer-les-conteneurs","title":"\u00c9tape 3.1 : D\u00e9marrer les Conteneurs","text":"<p>Dans le dossier contenant <code>docker-compose.yml</code>, ex\u00e9cutez : <pre><code>docker compose up -d\n</code></pre> Explication : - <code>-d</code> \u2192 Ex\u00e9cute en mode d\u00e9tach\u00e9 (en arri\u00e8re-plan).</p> <p>Info</p> <p>Pour voir les logs des conteneurs en temps r\u00e9el, utilisez <code>docker compose logs -f</code>.</p>"},{"location":"docker/cours/docker-compose/#etape-32-verifier-si-le-conteneur-tourne","title":"\u00c9tape 3.2 : V\u00e9rifier si le Conteneur Tourne","text":"<p><pre><code>docker compose ps\n</code></pre> Sortie attendue : <pre><code>NAME             IMAGE       PORTS                  STATUS\nmon-projet-web   nginx       0.0.0.0:8080-&gt;80/tcp   Up\n</code></pre></p>"},{"location":"docker/cours/docker-compose/#etape-33-tester-dans-un-navigateur","title":"\u00c9tape 3.3 : Tester dans un Navigateur","text":"<p>Allez sur : <pre><code>http://localhost:8080\n</code></pre> \ud83d\udc49 Vous devriez voir : \"Bienvenue sur mon serveur Nginx avec Docker Compose !\".</p>"},{"location":"docker/cours/docker-compose/#partie-4-gestion-des-conteneurs-avec-docker-compose","title":"Partie 4 : Gestion des Conteneurs avec Docker Compose","text":""},{"location":"docker/cours/docker-compose/#arreter-les-conteneurs","title":"Arr\u00eater les Conteneurs","text":"<p><pre><code>docker compose down\n</code></pre> \ud83d\udc49 Arr\u00eate et supprime les conteneurs et les r\u00e9seaux.</p>"},{"location":"docker/cours/docker-compose/#redemarrer-les-conteneurs","title":"Red\u00e9marrer les Conteneurs","text":"<pre><code>docker compose restart\n</code></pre>"},{"location":"docker/cours/docker-compose/#verifier-les-logs","title":"V\u00e9rifier les Logs","text":"<pre><code>docker compose logs\n</code></pre>"},{"location":"docker/cours/docker-compose/#partie-5-ajouter-une-base-de-donnees-avec-mysql","title":"Partie 5 : Ajouter une Base de Donn\u00e9es avec MySQL","text":"<p>Nous allons maintenant ajouter une base de donn\u00e9es MySQL \u00e0 notre <code>docker-compose.yml</code>.</p>"},{"location":"docker/cours/docker-compose/#etape-51-modifier-docker-composeyml","title":"\u00c9tape 5.1 : Modifier <code>docker-compose.yml</code>","text":"<pre><code>services:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: user\n      MYSQL_PASSWORD: password\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - mysql_data:/var/lib/mysql\n\nvolumes:\n  mysql_data:\n</code></pre> <p>Explication : - Ajout d'un service <code>db</code> bas\u00e9 sur MySQL 5.7. - Configuration des variables d'environnement (mot de passe, utilisateur...). - Ajout d'un volume nomm\u00e9 <code>mysql_data</code> pour stocker les donn\u00e9es de mani\u00e8re persistante.  </p>"},{"location":"docker/cours/docker-compose/#etape-52-relancer-docker-compose","title":"\u00c9tape 5.2 : Relancer Docker Compose","text":"<pre><code>docker compose up -d\n</code></pre>"},{"location":"docker/cours/docker-compose/#etape-53-verifier-si-mysql-fonctionne","title":"\u00c9tape 5.3 : V\u00e9rifier si MySQL fonctionne","text":"<p><pre><code>docker compose ps\n</code></pre> Sortie attendue : <pre><code>NAME             IMAGE       PORTS                    STATUS\nmon-projet-web   nginx       0.0.0.0:8080-&gt;80/tcp     Up\nmon-projet-db    mysql:5.7   0.0.0.0:3306-&gt;3306/tcp   Up\n</code></pre></p>"},{"location":"docker/cours/docker-compose/#etape-54-tester-la-connexion-mysql","title":"\u00c9tape 5.4 : Tester la Connexion MySQL","text":"<p><pre><code>docker exec -it $(docker compose ps -q db) mysql -uuser -ppassword testdb\n</code></pre> Si tout fonctionne, vous aurez acc\u00e8s au terminal MySQL.</p>"},{"location":"docker/cours/docker-compose/#partie-6-communication-inter-conteneur","title":"Partie 6: communication inter conteneur","text":""},{"location":"docker/cours/docker-compose/#etape-61-modifier-docker-composeyml","title":"\u00c9tape 6.1 : Modifier <code>docker-compose.yml</code>","text":"<p><pre><code>services:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: user\n      MYSQL_PASSWORD: password\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - mysql_data:/var/lib/mysql\n\n  curl:\n    image: alpine/curl:latest\n    command: sleep infinity\n\nvolumes:\n  mysql_data:\n</code></pre> Explication : - Ajout d'un service <code>curl</code>. - command: <code>sleep infinity</code> permet de faire en sorte que le conteneur reste en vie.  </p>"},{"location":"docker/cours/docker-compose/#etape-62-interroger-le-conteneur-web","title":"\u00c9tape 6.2 : interroger le conteneur <code>web</code>","text":"<p>Connectez vous au conteneur <code>curl</code> <pre><code>docker compose exec -it curl sh\n</code></pre></p> <p>dans l'invite de commande \u00e9crivez: <pre><code>curl web\n</code></pre> Vous devriez voir le contenu de la page html. Nous constatons donc que depuis un conteneur il est possible d'en interroger un autre en utilisant son nom comme url.  </p>"},{"location":"docker/cours/docker-compose/#exercices-pratique","title":"Exercices Pratique","text":""},{"location":"docker/cours/docker-compose/#exercice-1","title":"Exercice 1","text":"<ol> <li>Cr\u00e9ez un service du framework backend de votre choix.      Ce dernier doit pouvoir se connecter \u00e0 la base de donn\u00e9e et repondre \u00e0 des requetes REST (exemple: express, fastapi, symfony...)</li> <li>Modifiez le contenu HTML pour interroger votre backend</li> </ol> <p>Info</p> <p>Cette exercice est volontairement tr\u00e8s libre, vous pouvez impl\u00e9menter la ou les fonctionnalit\u00e9s backend que vous voulez, tant qu'elle interragissent avec la base de donn\u00e9e et que vous pouvez interroger votre backend depuis la page web.</p>"},{"location":"docker/cours/dockerfile-intro/","title":"Introduction \u00e0 l'\u00c9criture d'un Dockerfile","text":""},{"location":"docker/cours/dockerfile-intro/#introduction","title":"Introduction","text":"<p>Un Dockerfile est un fichier texte contenant une s\u00e9rie d\u2019instructions permettant de cr\u00e9er une image Docker personnalis\u00e9e. Il d\u00e9finit tout ce dont un conteneur a besoin pour fonctionner, comme : - Le syst\u00e8me de base (ex. Debian, Ubuntu, Alpine...). - Les d\u00e9pendances et les logiciels n\u00e9cessaires. - Les commandes ex\u00e9cut\u00e9es au d\u00e9marrage.  </p> <p>Dans ce tutoriel, nous allons : 1. Cr\u00e9er un Dockerfile simple. 2. Construire une image Docker avec ce Dockerfile. 3. Lancer un conteneur bas\u00e9 sur cette image. 4. Tester son bon fonctionnement.  </p>"},{"location":"docker/cours/dockerfile-intro/#partie-1-structure-de-base-dun-dockerfile","title":"Partie 1 : Structure de Base d'un Dockerfile","text":"<p>Un Dockerfile est compos\u00e9 d\u2019instructions cl\u00e9s. Voici un exemple basique :</p> <pre><code># 1. D\u00e9finir l\u2019image de base\nFROM ubuntu:latest\n\n# 2. Auteur de l\u2019image\nLABEL maintainer=\"Votre Nom &lt;email@example.com&gt;\"\n\n# 3. Mettre \u00e0 jour le syst\u00e8me et installer des paquets\nRUN apt update &amp;&amp; apt install -y curl\n\n# 4. D\u00e9finir la commande par d\u00e9faut \u00e0 ex\u00e9cuter\nCMD [\"echo\", \"Hello depuis mon conteneur personnalis\u00e9 !\"]\n</code></pre> <p>Explication des instructions : - <code>FROM ubuntu:latest</code> \u2192 Utilise Ubuntu comme image de base. - <code>LABEL maintainer=\"Votre Nom\"</code> \u2192 Ajoute une \u00e9tiquette avec les informations de l\u2019auteur. - <code>RUN apt update &amp;&amp; apt install -y curl</code> \u2192 Met \u00e0 jour le syst\u00e8me et installe curl. - <code>CMD [\"echo\", \"Hello depuis mon conteneur personnalis\u00e9 !\"]</code> \u2192 Affiche un message par d\u00e9faut.  </p>"},{"location":"docker/cours/dockerfile-intro/#partie-2-creation-dun-dockerfile-et-construction-dune-image","title":"Partie 2 : Cr\u00e9ation d'un Dockerfile et Construction d'une Image","text":"<p>Nous allons maintenant cr\u00e9er et tester notre Dockerfile.</p>"},{"location":"docker/cours/dockerfile-intro/#etape-21-creer-un-repertoire-de-travail","title":"\u00c9tape 2.1 : Cr\u00e9er un r\u00e9pertoire de travail","text":"<pre><code>mkdir mon_dockerfile &amp;&amp; cd mon_dockerfile\n</code></pre>"},{"location":"docker/cours/dockerfile-intro/#etape-22-creer-le-dockerfile","title":"\u00c9tape 2.2 : Cr\u00e9er le Dockerfile","text":"<p><pre><code>nano Dockerfile\n</code></pre> Collez le contenu suivant : <pre><code>FROM ubuntu:latest\nLABEL maintainer=\"Votre Nom &lt;email@example.com&gt;\"\nRUN apt update &amp;&amp; apt install -y curl\nCMD [\"echo\", \"Hello depuis mon conteneur personnalis\u00e9 !\"]\n</code></pre></p>"},{"location":"docker/cours/dockerfile-intro/#etape-23-construire-limage-docker","title":"\u00c9tape 2.3 : Construire l\u2019image Docker","text":"<pre><code>docker build -t mon_image_personnalisee .\n</code></pre> <p>Explication : - <code>-t mon_image_personnalisee</code> \u2192 Donne un nom \u00e0 l\u2019image (<code>mon_image_personnalisee</code>). - <code>.</code> \u2192 Utilise le Dockerfile dans le dossier actuel.  </p> <p>Info</p> <p>Vous verrez plusieurs \u00e9tapes s\u2019ex\u00e9cuter lors de la construction de l\u2019image.</p>"},{"location":"docker/cours/dockerfile-intro/#partie-3-lancer-et-tester-le-conteneur","title":"Partie 3 : Lancer et Tester le Conteneur","text":"<p>Une fois l\u2019image cr\u00e9\u00e9e, lan\u00e7ons un conteneur bas\u00e9 sur celle-ci.</p>"},{"location":"docker/cours/dockerfile-intro/#etape-31-demarrer-un-conteneur","title":"\u00c9tape 3.1 : D\u00e9marrer un conteneur","text":"<pre><code>docker run --name mon_conteneur mon_image_personnalisee\n</code></pre> <p>Sortie attendue : <pre><code>Hello depuis mon conteneur personnalis\u00e9 !\n</code></pre></p> <p>Info</p> <p>Le conteneur ex\u00e9cute la commande <code>echo</code> d\u00e9finie dans le Dockerfile, puis s\u2019arr\u00eate.</p>"},{"location":"docker/cours/dockerfile-intro/#etape-32-verifier-la-liste-des-conteneurs","title":"\u00c9tape 3.2 : V\u00e9rifier la Liste des Conteneurs","text":"<pre><code>docker ps -a\n</code></pre> <p>Sortie attendue : <pre><code>CONTAINER ID   IMAGE                   COMMAND   STATUS                     NAMES\nxxxxxxx        mon_image_personnalisee \"echo ...\" Exited (0) xx seconds ago mon_conteneur\n</code></pre></p> <p>Info</p> <p>Comme notre conteneur ex\u00e9cute uniquement <code>echo</code>, il s\u2019arr\u00eate imm\u00e9diatement apr\u00e8s avoir affich\u00e9 le message.</p>"},{"location":"docker/cours/dockerfile-intro/#partie-4-cas-pratique-un-serveur-web-avec-un-fichier-html","title":"Partie 4 : Cas Pratique - Un Serveur Web avec un Fichier HTML","text":"<p>Nous allons maintenant cr\u00e9er une image avec Nginx qui servira une page HTML personnalis\u00e9e.</p>"},{"location":"docker/cours/dockerfile-intro/#etape-41-creer-un-nouveau-repertoire-et-fichier-html","title":"\u00c9tape 4.1 : Cr\u00e9er un nouveau r\u00e9pertoire et fichier HTML","text":"<pre><code>mkdir mon_serveur_web\ncd mon_serveur_web\necho \"&lt;h1&gt;Bienvenue sur mon serveur web Docker !&lt;/h1&gt;\" &gt; index.html\n</code></pre>"},{"location":"docker/cours/dockerfile-intro/#etape-42-creer-un-dockerfile","title":"\u00c9tape 4.2 : Cr\u00e9er un Dockerfile","text":"<p><pre><code>nano Dockerfile\n</code></pre> Ajoutez ce contenu : <pre><code># Utiliser l\u2019image Nginx officielle\nFROM nginx:latest\n\n# Copier le fichier HTML personnalis\u00e9 dans le conteneur\nCOPY index.html /usr/share/nginx/html/index.html\n\n# Exposer le port 80\nEXPOSE 80\n\n# Lancer Nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre></p> <p>Info</p> <p>Nous pouvons constater deux nouveaux mots cl\u00e9: COPY: Permet de copier un fichier ou un dossier local dans l'image EXPOSE: Indique que le port doit \u00eatre ouvert</p>"},{"location":"docker/cours/dockerfile-intro/#etape-43-construire-et-lancer-limage","title":"\u00c9tape 4.3 : Construire et Lancer l\u2019Image","text":"<pre><code>docker build -t mon_nginx .\ndocker run -d -p 8080:80 --name serveur_web mon_nginx\n</code></pre>"},{"location":"docker/cours/dockerfile-intro/#etape-44-tester-le-serveur-web","title":"\u00c9tape 4.4 : Tester le Serveur Web","text":"<p>Ouvrez votre navigateur et allez \u00e0 l\u2019URL : <pre><code>http://localhost:8080\n</code></pre></p> <p>Info</p> <p>Vous devriez voir le message <code>Bienvenue sur mon serveur web Docker !</code>.</p>"},{"location":"docker/cours/dockerfile-intro/#exercice-pratique","title":"Exercice Pratique","text":""},{"location":"docker/cours/dockerfile-intro/#objectif","title":"Objectif :","text":"<ol> <li>Cr\u00e9er un Dockerfile qui g\u00e9n\u00e8re une image bas\u00e9e sur Debian.</li> <li>Installer Apache (<code>apache2</code>) et copier un fichier HTML personnalis\u00e9 dans ce m\u00eame dockerfile.</li> <li>Lancer le conteneur et tester l\u2019acc\u00e8s depuis le navigateur.</li> </ol>"},{"location":"docker/cours/dockerfile-suite/","title":"Dockerisation d'un Projet Angular","text":""},{"location":"docker/cours/dockerfile-suite/#introduction","title":"Introduction","text":"<p>Dans ce tutoriel, nous allons apprendre \u00e0 contenir un projet Angular avec Docker. L'objectif est de partir d'un projet Angular existant et de cr\u00e9er une image Docker permettant de l'ex\u00e9cuter facilement.</p>"},{"location":"docker/cours/dockerfile-suite/#ce-que-nous-allons-faire","title":"Ce que nous allons faire :","text":"<ol> <li>Cr\u00e9er un projet Angular (si besoin).</li> <li>\u00c9crire un Dockerfile pour builder et servir l'application.</li> <li>Construire l'image Docker et ex\u00e9cuter le conteneur.</li> <li>Tester l'application Angular dans un navigateur.</li> </ol>"},{"location":"docker/cours/dockerfile-suite/#partie-1-prerequis","title":"Partie 1 : Pr\u00e9requis","text":"<p>Avant de commencer, assurez-vous d\u2019avoir Node.js install\u00e9 sur votre machine :</p>"},{"location":"docker/cours/dockerfile-suite/#verification-de-nodejs","title":"V\u00e9rification de Node.js :","text":"<p><pre><code>node -v\n</code></pre> Sortie attendue : <pre><code>vXX.XX.XX\n</code></pre></p> <p>Si Node.js n'est pas install\u00e9, consultez Installation de Node.js</p>"},{"location":"docker/cours/dockerfile-suite/#partie-2-creation-dun-projet-angular","title":"Partie 2 : Cr\u00e9ation d'un Projet Angular","text":"<p>Si vous avez d\u00e9j\u00e0 un projet Angular, passez \u00e0 la Partie 3.</p>"},{"location":"docker/cours/dockerfile-suite/#etape-21-installer-angular-cli","title":"\u00c9tape 2.1 : Installer Angular CLI","text":"<pre><code>npm install -g @angular/cli\n</code></pre>"},{"location":"docker/cours/dockerfile-suite/#etape-22-creer-un-projet-angular","title":"\u00c9tape 2.2 : Cr\u00e9er un Projet Angular","text":"<p><pre><code>ng new mon-projet-angular\ncd mon-projet-angular\n</code></pre> S\u00e9lectionnez : - CSS pour les styles. - Pas de routing (ou oui selon votre besoin).</p>"},{"location":"docker/cours/dockerfile-suite/#etape-23-lancer-le-serveur-angular-en-local","title":"\u00c9tape 2.3 : Lancer le Serveur Angular en Local","text":"<p><pre><code>ng serve --host 0.0.0.0\n</code></pre> L'application est accessible sur : <pre><code>http://localhost:4200\n</code></pre></p> <p>Info</p> <p>\u00c0 ce stade, l'application fonctionne, mais elle d\u00e9pend de Node.js. Nous allons maintenant la dockeriser.</p>"},{"location":"docker/cours/dockerfile-suite/#partie-3-dockerisation-dangular","title":"Partie 3 : Dockerisation d'Angular","text":""},{"location":"docker/cours/dockerfile-suite/#etape-31-generer-les-fichiers-de-build-angular","title":"\u00c9tape 3.1 : G\u00e9n\u00e9rer les fichiers de build Angular","text":""},{"location":"docker/cours/dockerfile-suite/#etape-31-ecrire-le-dockerfile","title":"\u00c9tape 3.1 : \u00c9crire le Dockerfile","text":"<p>Dans le dossier du projet, cr\u00e9ez un fichier Dockerfile : <pre><code>nano Dockerfile\n</code></pre></p> <p>Ajoutez ce contenu : <pre><code>FROM node:alpine\n\nWORKDIR /usr/src/app\n\nCOPY . /usr/src/app\n\nRUN npm install -g @angular/cli\n\nRUN npm install\n\nCMD [\"ng\", \"serve\", \"--host\", \"0.0.0.0\"]\n</code></pre></p>"},{"location":"docker/cours/dockerfile-suite/#partie-4-construction-et-execution-du-conteneur","title":"Partie 4 : Construction et Ex\u00e9cution du Conteneur","text":""},{"location":"docker/cours/dockerfile-suite/#etape-41-construire-limage-docker","title":"\u00c9tape 4.1 : Construire l\u2019Image Docker","text":"<pre><code>docker build -t mon-angular .\n</code></pre> <p>Info</p> <p>Docker va t\u00e9l\u00e9charger les d\u00e9pendances et compiler Angular. Cela peut prendre du temps la premi\u00e8re fois.</p>"},{"location":"docker/cours/dockerfile-suite/#etape-42-lancer-le-conteneur","title":"\u00c9tape 4.2 : Lancer le Conteneur","text":""},{"location":"docker/cours/dockerfile-suite/#docker-run-d-p-80804200-name-angular_app-mon-angular","title":"<pre><code>docker run -d -p 8080:4200 --name angular_app mon-angular\n</code></pre>","text":""},{"location":"docker/cours/dockerfile-suite/#partie-5-tester-lapplication-dockerisee","title":"Partie 5 : Tester l'Application Dockeris\u00e9e","text":""},{"location":"docker/cours/dockerfile-suite/#etape-51-verifier-si-le-conteneur-tourne","title":"\u00c9tape 5.1 : V\u00e9rifier si le Conteneur Tourne","text":"<p><pre><code>docker ps\n</code></pre> Sortie attendue : <pre><code>CONTAINER ID   IMAGE        PORTS                  NAMES\nxxxxxxxxxxxx   mon-angular  0.0.0.0:8080-&gt;80/tcp   angular_app\n</code></pre></p>"},{"location":"docker/cours/dockerfile-suite/#etape-52-ouvrir-lapplication","title":"\u00c9tape 5.2 : Ouvrir l'Application","text":"<p>Allez sur : <pre><code>http://localhost:8080\n</code></pre> Vous devriez voir l'application Angular fonctionner !</p> <p>Info</p> <p>Si l\u2019application ne s\u2019affiche pas, v\u00e9rifiez que le conteneur est bien lanc\u00e9 avec <code>docker ps</code>.</p>"},{"location":"docker/cours/dockerfile-suite/#exercice-pratique","title":"Exercice Pratique","text":""},{"location":"docker/cours/dockerfile-suite/#objectif","title":"Objectif","text":"<ol> <li>Cr\u00e9er un autre Dockerfile qui utilise un framework web d'un autre language (python, php, java, etc) (Vous devez aussi r\u00e9cup\u00e9rer des sources, que ce soit le projet par defaut ou un projet sur lequel vous avez d\u00e9j\u00e0 travaill\u00e9).</li> <li>Construire et ex\u00e9cuter l\u2019image.</li> <li>Tester si l\u2019application s\u2019affiche sur <code>http://localhost:8081</code>.</li> </ol>"},{"location":"docker/cours/exec/","title":"Introduction \u00e0 la commande <code>docker exec</code>","text":""},{"location":"docker/cours/exec/#introduction","title":"Introduction","text":"<p>La commande <code>docker exec</code> permet d\u2019ex\u00e9cuter une commande dans un conteneur en cours d\u2019ex\u00e9cution. Cela est particuli\u00e8rement utile pour interagir avec un conteneur sans avoir \u00e0 l\u2019arr\u00eater ou le red\u00e9marrer, pour d\u00e9boguer une application, ou encore pour ex\u00e9cuter des t\u00e2ches d\u2019administration \u00e0 l\u2019int\u00e9rieur d\u2019un conteneur.</p> <p>Dans ce tutoriel, nous allons voir comment utiliser <code>docker exec</code> avec plusieurs cas pratiques, notamment : - Ex\u00e9cuter des commandes simples. - Acc\u00e9der \u00e0 un shell interactif. - V\u00e9rifier et modifier un fichier dans un conteneur. - Lancer un service ou un processus dans un conteneur.</p>"},{"location":"docker/cours/exec/#partie-1-lancer-un-conteneur-pour-les-tests","title":"Partie 1 : Lancer un Conteneur pour les Tests","text":"<p>Avant de pouvoir utiliser <code>docker exec</code>, nous devons d'abord avoir un conteneur en cours d\u2019ex\u00e9cution. </p> <p>Nous allons utiliser l\u2019image officielle Ubuntu pour nos tests.</p>"},{"location":"docker/cours/exec/#etape-11-demarrer-un-conteneur-ubuntu-en-arriere-plan","title":"\u00c9tape 1.1 : D\u00e9marrer un conteneur Ubuntu en arri\u00e8re-plan","text":"<pre><code>docker run -d --name ubuntu_test ubuntu sleep infinity\n</code></pre> <p>Explication : - <code>-d</code> : Ex\u00e9cute le conteneur en arri\u00e8re-plan. - <code>--name ubuntu_test</code> : Donne un nom au conteneur (<code>ubuntu_test</code>). - <code>ubuntu</code> : Utilise l\u2019image officielle Ubuntu. - <code>sleep infinity</code> : Emp\u00eache le conteneur de s\u2019arr\u00eater imm\u00e9diatement.</p>"},{"location":"docker/cours/exec/#etape-12-verifier-que-le-conteneur-est-bien-en-cours-dexecution","title":"\u00c9tape 1.2 : V\u00e9rifier que le conteneur est bien en cours d\u2019ex\u00e9cution","text":"<pre><code>docker ps\n</code></pre> <p>Info</p> <p>Si tout est correct, vous devriez voir ubuntu_test en cours d\u2019ex\u00e9cution.</p>"},{"location":"docker/cours/exec/#partie-2-executer-une-commande-dans-un-conteneur","title":"Partie 2 : Ex\u00e9cuter une Commande dans un Conteneur","text":"<p>Nous allons maintenant ex\u00e9cuter des commandes \u00e0 l\u2019int\u00e9rieur du conteneur.</p>"},{"location":"docker/cours/exec/#etape-21-verifier-la-version-dubuntu","title":"\u00c9tape 2.1 : V\u00e9rifier la version d\u2019Ubuntu","text":"<pre><code>docker exec ubuntu_test cat /etc/os-release\n</code></pre> <p>Sortie attendue : <pre><code>NAME=\"Ubuntu\"\nVERSION=\"...\"\n</code></pre></p> <p>Info</p> <p>Cette commande ex\u00e9cute <code>cat /etc/os-release</code> dans le conteneur et affiche la version d\u2019Ubuntu.</p>"},{"location":"docker/cours/exec/#etape-22-lister-les-fichiers-dans-le-conteneur","title":"\u00c9tape 2.2 : Lister les fichiers dans le conteneur","text":"<pre><code>docker exec ubuntu_test ls -l /\n</code></pre> <p>Sortie attendue : <pre><code>total ...\ndrwxr-xr-x   1 root root ... bin\ndrwxr-xr-x   1 root root ... boot\n...\n</code></pre></p> <p>Info</p> <p>On peut voir la structure des fichiers du syst\u00e8me interne du conteneur.</p>"},{"location":"docker/cours/exec/#partie-3-acceder-a-un-shell-interactif","title":"Partie 3 : Acc\u00e9der \u00e0 un Shell Interactif","text":"<p>Si vous voulez explorer un conteneur comme si vous \u00e9tiez connect\u00e9 directement \u00e0 une machine, utilisez un shell interactif.</p>"},{"location":"docker/cours/exec/#etape-31-ouvrir-un-terminal-dans-le-conteneur","title":"\u00c9tape 3.1 : Ouvrir un terminal dans le conteneur","text":"<pre><code>docker exec -it ubuntu_test bash\n</code></pre> <p>Explication : - <code>-i</code> : Active le mode interactif. - <code>-t</code> : Associe un pseudo-terminal (tty). - <code>bash</code> : Ouvre un shell Bash dans le conteneur.</p> <p>Info</p> <p>Une fois la commande ex\u00e9cut\u00e9e, votre invite de commande changera en quelque chose comme : <pre><code>root@&lt;container_id&gt;:/#\n</code></pre> Vous \u00eates maintenant dans le conteneur et pouvez ex\u00e9cuter des commandes comme sur une vraie machine Linux.</p>"},{"location":"docker/cours/exec/#etape-32-quitter-le-conteneur","title":"\u00c9tape 3.2 : Quitter le conteneur","text":"<p>Pour quitter le shell, tapez : <pre><code>exit\n</code></pre> ou utilisez le raccourci <code>Ctrl + D</code>.</p>"},{"location":"docker/cours/exec/#partie-4-verifier-et-modifier-un-fichier-dans-un-conteneur","title":"Partie 4 : V\u00e9rifier et Modifier un Fichier dans un Conteneur","text":"<p>Nous allons maintenant cr\u00e9er un fichier dans le conteneur et v\u00e9rifier qu\u2019il est bien pr\u00e9sent.</p>"},{"location":"docker/cours/exec/#etape-41-creer-un-fichier-dans-le-conteneur","title":"\u00c9tape 4.1 : Cr\u00e9er un fichier dans le conteneur","text":"<p>Ex\u00e9cutez cette commande pour cr\u00e9er un fichier <code>/tmp/testfile.txt</code> \u00e0 l\u2019int\u00e9rieur du conteneur : <pre><code>docker exec ubuntu_test bash -c \"echo 'Hello depuis le conteneur' &gt; /tmp/testfile.txt\"\n</code></pre></p>"},{"location":"docker/cours/exec/#etape-42-verifier-que-le-fichier-existe","title":"\u00c9tape 4.2 : V\u00e9rifier que le fichier existe","text":"<pre><code>docker exec ubuntu_test cat /tmp/testfile.txt\n</code></pre> <p>Sortie attendue : <pre><code>Hello depuis le conteneur\n</code></pre></p> <p>Info</p> <p>Cela prouve que nous avons bien cr\u00e9\u00e9 et modifi\u00e9 un fichier dans le conteneur.</p>"},{"location":"docker/cours/exec/#partie-5-lancer-un-service-dans-un-conteneur","title":"Partie 5 : Lancer un Service dans un Conteneur","text":"<p>Nous allons maintenant tester le lancement d\u2019un service nginx \u00e0 l\u2019int\u00e9rieur d\u2019un conteneur Ubuntu.</p>"},{"location":"docker/cours/exec/#etape-51-installer-nginx-dans-le-conteneur","title":"\u00c9tape 5.1 : Installer nginx dans le conteneur","text":"<pre><code>docker exec ubuntu_test apt update \ndocker exec ubuntu_test apt install -y nginx\n</code></pre>"},{"location":"docker/cours/exec/#etape-52-demarrer-nginx","title":"\u00c9tape 5.2 : D\u00e9marrer nginx","text":"<pre><code>docker exec ubuntu_test service nginx start\n</code></pre>"},{"location":"docker/cours/exec/#etape-53-verifier-que-nginx-fonctionne","title":"\u00c9tape 5.3 : V\u00e9rifier que nginx fonctionne","text":"<pre><code>docker exec ubuntu_test service nginx status\n</code></pre> <p>Sortie attendue : <pre><code>* nginx is running\n</code></pre></p> <p>Info</p> <p>Nous avons install\u00e9 et lanc\u00e9 un serveur web Nginx dans le conteneur.</p>"},{"location":"docker/cours/exec/#exercice-pratique","title":"Exercice Pratique","text":""},{"location":"docker/cours/exec/#objectif","title":"Objectif :","text":"<ol> <li>D\u00e9marrer un conteneur bas\u00e9 sur Debian (<code>debian:latest</code>).</li> <li>Cr\u00e9er un fichier <code>/root/exercice.txt</code> dans le conteneur avec le texte \"Docker exec fonctionne !\".</li> <li>V\u00e9rifier que le fichier a bien \u00e9t\u00e9 cr\u00e9\u00e9.</li> <li>Lancer un shell interactif dans le conteneur et afficher le contenu du fichier.</li> </ol>"},{"location":"docker/cours/installation/","title":"Installation de Docker sur Linux et Windows","text":""},{"location":"docker/cours/installation/#introduction","title":"Introduction","text":"<p>Docker est une plateforme de virtualisation l\u00e9g\u00e8re qui permet de d\u00e9ployer des applications dans des conteneurs. Ces conteneurs sont des environnements isol\u00e9s, offrant une grande portabilit\u00e9 et permettant d'\u00e9viter les probl\u00e8mes li\u00e9s aux environnements de d\u00e9veloppement et de production. Dans ce tutoriel, nous allons couvrir l'installation de Docker sur Linux et Windows, et vous fournir les \u00e9tapes n\u00e9cessaires pour commencer \u00e0 travailler avec Docker dans ces deux environnements.</p>"},{"location":"docker/cours/installation/#partie-1-installation-de-docker-sur-linux","title":"Partie 1 : Installation de Docker sur Linux","text":"<p>Docker est tr\u00e8s bien support\u00e9 sur la plupart des distributions Linux. Nous allons couvrir l'installation sur une distribution bas\u00e9e sur Debian/Ubuntu et RedHat/CentOS.</p>"},{"location":"docker/cours/installation/#etape-11-installation-de-docker-sur-ubuntudebian","title":"\u00c9tape 1.1 : Installation de Docker sur Ubuntu/Debian","text":"<ol> <li> <p>Mettre \u00e0 jour le syst\u00e8me :    <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre></p> </li> <li> <p>Installer les d\u00e9pendances n\u00e9cessaires :    Docker n\u00e9cessite certains paquets pour fonctionner correctement, installez-les avec :    <pre><code>sudo apt install apt-transport-https ca-certificates curl software-properties-common\n</code></pre></p> </li> <li> <p>Ajouter la cl\u00e9 GPG officielle de Docker :    Ex\u00e9cutez la commande suivante pour ajouter la cl\u00e9 GPG officielle de Docker \u00e0 votre syst\u00e8me :    <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre></p> </li> <li> <p>Ajouter le d\u00e9p\u00f4t Docker :    Ajoutez le d\u00e9p\u00f4t Docker aux sources de votre syst\u00e8me pour pouvoir installer Docker :    <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n</code></pre></p> </li> <li> <p>Mettre \u00e0 jour les sources et installer Docker :    <pre><code>sudo apt update\nsudo apt install docker-ce docker-ce-cli containerd.io\n</code></pre></p> </li> <li> <p>V\u00e9rifier l'installation :    Pour v\u00e9rifier que Docker est correctement install\u00e9, ex\u00e9cutez :    <pre><code>sudo docker --version\n</code></pre></p> </li> <li> <p>D\u00e9marrer et activer Docker :    Si Docker n\u2019est pas d\u00e9j\u00e0 d\u00e9marr\u00e9, lancez-le et assurez-vous qu'il se lance automatiquement au d\u00e9marrage :    <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre></p> </li> <li> <p>V\u00e9rifier que Docker fonctionne :    Vous pouvez v\u00e9rifier que Docker fonctionne correctement avec la commande suivante :    <pre><code>sudo docker run hello-world\n</code></pre></p> </li> </ol> <p>Cette commande t\u00e9l\u00e9chargera une image de test et ex\u00e9cutera un conteneur, affichant un message de bienvenue si tout est bien configur\u00e9.</p>"},{"location":"docker/cours/installation/#etape-12-installation-de-docker-sur-centosrhel","title":"\u00c9tape 1.2 : Installation de Docker sur CentOS/RHEL","text":"<ol> <li> <p>Mettre \u00e0 jour le syst\u00e8me :    <pre><code>sudo yum update -y\n</code></pre></p> </li> <li> <p>Installer les d\u00e9pendances :    <pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre></p> </li> <li> <p>Ajouter le d\u00e9p\u00f4t Docker :    Ajoutez le d\u00e9p\u00f4t Docker officiel \u00e0 vos sources :    <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre></p> </li> <li> <p>Installer Docker :    Installez Docker avec :    <pre><code>sudo yum install docker-ce docker-ce-cli containerd.io\n</code></pre></p> </li> <li> <p>D\u00e9marrer et activer Docker :    Lancez Docker et assurez-vous qu'il se lance au d\u00e9marrage :    <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre></p> </li> <li> <p>V\u00e9rifier l'installation :    V\u00e9rifiez que Docker est bien install\u00e9 :    <pre><code>sudo docker --version\n</code></pre></p> </li> <li> <p>Ex\u00e9cuter un test :    Comme sur Ubuntu/Debian, vous pouvez tester l'installation avec :    <pre><code>sudo docker run hello-world\n</code></pre></p> </li> </ol>"},{"location":"docker/cours/installation/#partie-2-installation-de-docker-sur-windows-avec-docker-desktop","title":"Partie 2 : Installation de Docker sur Windows avec Docker Desktop","text":""},{"location":"docker/cours/installation/#etape-21-telecharger-docker-desktop","title":"\u00c9tape 2.1 : T\u00e9l\u00e9charger Docker Desktop","text":"<ol> <li> <p>Rendez-vous sur la page officielle de t\u00e9l\u00e9chargement de Docker Desktop pour Windows :    Docker Desktop - T\u00e9l\u00e9charger</p> </li> <li> <p>Cliquez sur Download for Windows pour t\u00e9l\u00e9charger l'installateur.</p> </li> <li> <p>Une fois le fichier t\u00e9l\u00e9charg\u00e9, lancez l'installateur.</p> </li> </ol>"},{"location":"docker/cours/installation/#etape-22-installation-de-docker-desktop","title":"\u00c9tape 2.2 : Installation de Docker Desktop","text":"<ol> <li>Lancer l'installateur :    Ouvrez le fichier t\u00e9l\u00e9charg\u00e9 et suivez les \u00e9tapes de l'installation. L'installateur va vous guider \u00e0 travers les \u00e9tapes suivantes :</li> <li>Accepter les conditions d'utilisation.</li> <li>Installer les composants n\u00e9cessaires (Docker Desktop, WSL 2 si n\u00e9cessaire).</li> <li> <p>Demander un red\u00e9marrage du syst\u00e8me \u00e0 la fin de l'installation.</p> </li> <li> <p>Activer WSL 2 :    Docker Desktop pour Windows utilise Windows Subsystem for Linux (WSL) 2. Si WSL 2 n\u2019est pas d\u00e9j\u00e0 install\u00e9, Docker vous guidera pour l\u2019installer pendant l'installation.</p> </li> </ol> <p>Si n\u00e9cessaire, suivez ces \u00e9tapes pour activer WSL 2 :    - Installez WSL via PowerShell en tant qu'administrateur :      <pre><code>wsl --install\n</code></pre>    - Red\u00e9marrez votre PC apr\u00e8s l\u2019installation de WSL.</p>"},{"location":"docker/cours/installation/#etape-23-lancer-docker-desktop","title":"\u00c9tape 2.3 : Lancer Docker Desktop","text":"<ol> <li> <p>Une fois l'installation termin\u00e9e, ouvrez Docker Desktop en cliquant sur l'ic\u00f4ne correspondante dans le menu d\u00e9marrer ou la barre des t\u00e2ches.</p> </li> <li> <p>Docker va se lancer et vous pourrez acc\u00e9der \u00e0 l'interface graphique de Docker.</p> </li> </ol>"},{"location":"docker/cours/installation/#etape-24-verifier-linstallation","title":"\u00c9tape 2.4 : V\u00e9rifier l'installation","text":"<ol> <li> <p>Ouvrez une fen\u00eatre PowerShell ou CMD et tapez la commande suivante pour v\u00e9rifier que Docker fonctionne :    <pre><code>docker --version\n</code></pre></p> </li> <li> <p>Lancez un conteneur de test pour v\u00e9rifier que tout fonctionne bien :    <pre><code>docker run hello-world\n</code></pre></p> </li> </ol> <p>Vous devriez voir un message de bienvenue qui confirme que Docker fonctionne correctement.</p>"},{"location":"docker/cours/installation/#partie-3-conclusion","title":"Partie 3 : Conclusion","text":""},{"location":"docker/cours/installation/#resume-de-linstallation","title":"R\u00e9sum\u00e9 de l'installation","text":"<ul> <li> <p>Sur Linux : L'installation de Docker est relativement simple avec les gestionnaires de paquets comme <code>apt</code> pour Ubuntu/Debian ou <code>yum</code> pour CentOS/RHEL. Apr\u00e8s l'installation, Docker peut \u00eatre test\u00e9 avec la commande <code>docker run hello-world</code>.</p> </li> <li> <p>Sur Windows : Docker Desktop est l'outil recommand\u00e9 pour utiliser Docker sur Windows. Il s\u2019appuie sur WSL 2 pour offrir une exp\u00e9rience proche de celle d\u2019un environnement Linux natif.</p> </li> </ul>"},{"location":"docker/cours/installation/#resultats-attendus","title":"R\u00e9sultats attendus","text":"<ul> <li>Sur Linux, vous serez en mesure de lancer des conteneurs en utilisant Docker.</li> <li>Sur Windows, Docker Desktop vous permettra d'ex\u00e9cuter des conteneurs et de g\u00e9rer vos images Docker gr\u00e2ce \u00e0 une interface graphique simple et des commandes en ligne via PowerShell.</li> </ul> <p>F\u00e9licitations ! Vous avez maintenant Docker install\u00e9 et vous pouvez commencer \u00e0 explorer le monde des conteneurs !</p>"},{"location":"docker/cours/volumes/","title":"Introduction \u00e0 l'option <code>-v</code> de Docker (Volumes)","text":""},{"location":"docker/cours/volumes/#introduction","title":"Introduction","text":"<p>L\u2019option <code>-v</code> (ou <code>--volume</code>) de Docker permet de monter des volumes, c'est-\u00e0-dire de lier un dossier du syst\u00e8me h\u00f4te \u00e0 un dossier \u00e0 l\u2019int\u00e9rieur d\u2019un conteneur. Cette fonctionnalit\u00e9 est essentielle pour partager des fichiers entre l\u2019h\u00f4te et le conteneur, pr\u00e9server des donn\u00e9es m\u00eame apr\u00e8s l\u2019arr\u00eat d\u2019un conteneur et modifier le contenu du conteneur en temps r\u00e9el.</p> <p>Dans ce tutoriel, nous allons voir comment utiliser <code>-v</code> pour monter un volume et modifier dynamiquement les fichiers d\u2019un serveur Nginx en conteneur.</p>"},{"location":"docker/cours/volumes/#partie-1-lancer-un-conteneur-nginx-normal","title":"Partie 1 : Lancer un Conteneur Nginx Normal","text":""},{"location":"docker/cours/volumes/#etape-11-telecharger-limage-nginx","title":"\u00c9tape 1.1 : T\u00e9l\u00e9charger l\u2019image Nginx","text":"<p>Avant de lancer un conteneur Nginx, assurez-vous d\u2019avoir l\u2019image officielle : <pre><code>docker pull nginx\n</code></pre></p>"},{"location":"docker/cours/volumes/#etape-12-lancer-un-conteneur-nginx-simple","title":"\u00c9tape 1.2 : Lancer un conteneur Nginx simple","text":"<p>Ex\u00e9cutez la commande suivante pour d\u00e9marrer un conteneur Nginx sans volume : <pre><code>docker run -p 8080:80 --name nginx_no_volume nginx\n</code></pre></p>"},{"location":"docker/cours/volumes/#etape-13-verifier-lacces-au-serveur","title":"\u00c9tape 1.3 : V\u00e9rifier l\u2019acc\u00e8s au serveur","text":"<p>Info</p> <p>Ouvrez votre navigateur et allez \u00e0 http://localhost:8080. Vous devriez voir la page par d\u00e9faut de Nginx.</p>"},{"location":"docker/cours/volumes/#partie-2-remplacer-le-html-par-un-contenu-personnalise-avec-v","title":"Partie 2 : Remplacer le HTML par un Contenu Personnalis\u00e9 avec <code>-v</code>","text":"<p>Nous allons maintenant utiliser un volume pour remplacer la page par d\u00e9faut de Nginx par une page HTML personnalis\u00e9e.</p>"},{"location":"docker/cours/volumes/#etape-21-creer-un-dossier-et-un-fichier-html","title":"\u00c9tape 2.1 : Cr\u00e9er un Dossier et un Fichier HTML","text":"<p>Sur votre ordinateur, cr\u00e9ez un dossier pour contenir notre page HTML personnalis\u00e9e: <pre><code>mkdir -p &lt;CHEMIN&gt;/nginx_html\n</code></pre></p> <p>Cr\u00e9ez un fichier <code>index.html</code> \u00e0 l\u2019int\u00e9rieur : <pre><code>echo \"&lt;h1&gt;Bienvenue sur mon site personnalis\u00e9 !&lt;/h1&gt;\" &gt; ~/docker/nginx_html/index.html\n</code></pre></p>"},{"location":"docker/cours/volumes/#etape-22-lancer-nginx-avec-un-volume","title":"\u00c9tape 2.2 : Lancer Nginx avec un Volume","text":"<p>Arr\u00eatez et supprimez l'ancien conteneur : <pre><code>docker stop nginx_no_volume  \ndocker rm nginx_no_volume\n</code></pre></p> <p>Lancez un nouveau conteneur Nginx en montant notre dossier en tant que volume : <pre><code>docker run -d -p 8080:80 --name nginx_with_volume -v &lt;CHEMIN&gt;/nginx_html:/usr/share/nginx/html nginx\n</code></pre></p> <p>Explication : - <code>-v &lt;CHEMIN&gt;/nginx_html:/usr/share/nginx/html</code> : Monte notre dossier local (<code>&lt;CHEMIN&gt;/nginx_html</code>) \u00e0 la place du dossier par d\u00e9faut de Nginx (<code>/usr/share/nginx/html</code>).</p>"},{"location":"docker/cours/volumes/#etape-23-verifier-que-la-page-a-change","title":"\u00c9tape 2.3 : V\u00e9rifier que la page a chang\u00e9","text":"<p>Info</p> <p>Retournez sur http://localhost:8080 et actualisez la page. Vous devriez voir \"Bienvenue sur mon site personnalis\u00e9 !\" au lieu de la page par d\u00e9faut de Nginx.</p> <p>Vous pouvez \u00e9galement tester avec : <pre><code>curl http://localhost:8080\n</code></pre> Vous devriez voir en sortie : <pre><code>&lt;h1&gt;Bienvenue sur mon site personnalis\u00e9 !&lt;/h1&gt;\n</code></pre></p>"},{"location":"docker/cours/volumes/#partie-3-modification-dynamique-du-html","title":"Partie 3 : Modification Dynamique du HTML","text":"<p>Une des forces des volumes est que les modifications sur l\u2019h\u00f4te sont imm\u00e9diatement prises en compte par le conteneur.</p>"},{"location":"docker/cours/volumes/#etape-31-modifier-le-fichier-html","title":"\u00c9tape 3.1 : Modifier le fichier HTML","text":"<p>\u00c9ditez le fichier <code>index.html</code> : <pre><code>echo \"&lt;h1&gt;Page mise \u00e0 jour avec succ\u00e8s !&lt;/h1&gt;\" &gt; ~/docker/nginx_html/index.html\n</code></pre></p>"},{"location":"docker/cours/volumes/#etape-32-verifier-le-changement","title":"\u00c9tape 3.2 : V\u00e9rifier le changement","text":"<p>Info</p> <p>Actualisez http://localhost:8080. La modification est imm\u00e9diatement visible, sans red\u00e9marrer le conteneur.</p> <p>Vous devriez voir : <pre><code>&lt;h1&gt;Page mise \u00e0 jour avec succ\u00e8s !&lt;/h1&gt;\n</code></pre></p>"},{"location":"docker/cours/volumes/#exercice-pratique","title":"Exercice Pratique","text":""},{"location":"docker/cours/volumes/#objectif","title":"Objectif :","text":"<ol> <li>Cr\u00e9er un nouveau conteneur Nginx nomm\u00e9 <code>nginx_test_volume</code>, tournant sur le port 8081.</li> <li>Cr\u00e9er un volume contenant un fichier HTML (<code>index.html</code>) avec le texte \"Exercice r\u00e9ussi !\".</li> <li>Monter le volume dans le conteneur pour qu'il affiche ce fichier HTML.</li> <li>V\u00e9rifier que la page affiche bien \"Exercice r\u00e9ussi !\".</li> </ol>"},{"location":"linux/","title":"Travaux Pratiques","text":""},{"location":"linux/#linux-securisation-dun-serveur-dedie","title":"Linux - s\u00e9curisation d'un serveur d\u00e9di\u00e9","text":""},{"location":"linux/#securisation-des-acces-au-serveur","title":"S\u00e9curisation des acc\u00e8s au serveur","text":"<ul> <li>TP: SSH: Configuration du SSH.</li> <li>TP: Pare-feu: Configuration du pare feu.</li> <li>TP: Services: S\u00e9curisation des services.</li> </ul>"},{"location":"linux/#surveillance-et-gestion-des-logs","title":"Surveillance et gestion des logs","text":"<ul> <li>TP: Rsyslog: Configuration et utilisation de rsyslog.</li> <li>TP: Analyse des logs: Analyse des logs de s\u00e9curit\u00e9.</li> <li>TP: Surveillance: Outils de surveillance en temps r\u00e9el.</li> </ul>"},{"location":"linux/#sauvegarde-et-reprise-apres-sinistre","title":"Sauvegarde et reprise apr\u00e8s sinistre","text":"<ul> <li>TP: Sauvegardes: Strat\u00e9gies de sauvegarde (locales et distantes).</li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/logs/","title":"Linux - Analyse des Logs de S\u00e9curit\u00e9 avec Auth.log","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#introduction","title":"Introduction","text":"<p>Les journaux de s\u00e9curit\u00e9 sont une ressource pr\u00e9cieuse pour d\u00e9tecter des connexions suspectes, des tentatives de brute-force ou des activit\u00e9s non autoris\u00e9es. Ce guide vous explique comment utiliser auth.log (le fichier journal d\u00e9di\u00e9 aux authentifications).</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#pourquoi-analyser-authlog","title":"Pourquoi analyser auth.log ?","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#authlog","title":"Auth.log","text":"<ul> <li>Suivi des authentifications : Captures des connexions SSH, sudo, \u00e9checs de connexion, etc.</li> <li>D\u00e9tection d'activit\u00e9s suspectes : Identifier des IP malveillantes ou des tentatives d'acc\u00e8s non autoris\u00e9es.</li> <li>D\u00e9pannage : Aide \u00e0 r\u00e9soudre les probl\u00e8mes li\u00e9s aux permissions et aux authentifications.</li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#partie-1-configuration-et-acces-aux-logs","title":"Partie 1 : Configuration et Acc\u00e8s aux Logs","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#etape-11-setup-docker","title":"\u00c9tape 1.1: Setup docker","text":"<p>Comme dans le tp pr\u00e9c\u00e9dent, nous allons utiliser docker pour pouvoir utiliser des outils qui autrement demanderais un linux natif.</p> <ol> <li>Cr\u00e9ez un nouveau dossier de travail</li> <li>Copiez votre cl\u00e9 id_rsa.pub dans votre dossier de travail</li> <li> <p>Cr\u00e9ez le dockerfile <pre><code>FROM ubuntu:latest\n\nRUN apt-get update &amp;&amp; apt-get install -y openssh-server\n\nRUN useradd -m -s /bin/bash test&amp;&amp; echo \"test:123456\" | chpasswd\nRUN mkdir -p /home/test/.ssh \nRUN chown test:test /home/test/.ssh \nRUN chmod 700 /home/test/.ssh\n\nRUN mkdir -p /etc/ssh/logs &amp;&amp; chown root:root /etc/ssh/logs &amp;&amp; chmod 700 /etc/ssh/logs\n\nRUN mkdir -p /run/sshd &amp;&amp; chown root:root /run/sshd &amp;&amp; chmod 700 /run/sshd\n\nCOPY id_rsa.pub /home/test/.ssh/authorized_keys\nRUN chmod 644 /home/test/.ssh/authorized_keys\n\nRUN sed -i '1i PasswordAuthentication no' /etc/ssh/sshd_config\nRUN sed -i '1i PermitEmptyPasswords no' /etc/ssh/sshd_config\nRUN sed -i '1i KbdInteractiveAuthentication no' /etc/ssh/sshd_config\nRUN sed -i '1i UsePAM yes' /etc/ssh/sshd_config\nRUN sed -i '1i PubkeyAuthentication yes' /etc/ssh/sshd_config\nRUN sed -i '1i X11Forwarding no' /etc/ssh/sshd_config\nRUN sed -i '1i PermitRootLogin no' /etc/ssh/sshd_config\nRUN sed -i '1i StrictModes yes' /etc/ssh/sshd_config\nRUN sed -i '1i LogLevel INFO' /etc/ssh/sshd_config\n\nRUN chmod 600 /etc/ssh/sshd_config\n\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\", \"-E\", \"/etc/ssh/logs/auth.log\"]\n</code></pre></p> </li> <li> <p>Cr\u00e9ez un fichier docker-compose.yml <pre><code>services:\n  ssh:\n    build: .\n    container_name: ssh\n    ports:\n      - 2222:22\n\n    volumes:\n      - ./logs:/etc/ssh/logs\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#etape-12-demarrer-lenv","title":"\u00c9tape 1.2: D\u00e9marrer l'env","text":"<ol> <li> <p>D\u00e9marrer l\u2019environnement Docker :    <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>V\u00e9rifier que les conteneurs tournent :    <pre><code>docker ps\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#etape-13-tester","title":"\u00c9tape 1.3: Tester","text":"<ol> <li>Connectez vous avec :    <pre><code>ssh test@localhost -p 2222\n</code></pre></li> <li>Vous pouvez directement consulter le fichier depuis votre systeme de fichier dans logs/auth.log \u00e0 cot\u00e9 de cotre docker-compose.yaml</li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#partie-2-analyse-des-logs-avec-authlog","title":"Partie 2 : Analyse des Logs avec Auth.log","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/logs/#etape-21-detection-de-connexions-ssh","title":"\u00c9tape 2.1 : D\u00e9tection de Connexions SSH","text":"<ol> <li>Points \u00e0 analyser :    - Connexions r\u00e9ussies :      <pre><code>Accepted password for &lt;user&gt; from &lt;IP&gt; port &lt;port&gt; ssh2\n</code></pre>    - Tentatives \u00e9chou\u00e9es :      <pre><code>Failed password for invalid user &lt;user&gt; from &lt;IP&gt; port &lt;port&gt; ssh2\n</code></pre>    - Essayez de faire apparaitre ces lignes</li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/","title":"Linux - Configuration des Pare-feu : UFW et iptables","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#introduction","title":"Introduction","text":"<p>Les pare-feu sont des outils essentiels pour s\u00e9curiser un serveur Linux. Ce guide explique en d\u00e9tail la configuration des deux principaux pare-feu : UFW (Uncomplicated Firewall) et iptables. Nous explorerons leurs fonctionnalit\u00e9s, leur configuration et leur validation.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>Une machine Linux avec un acc\u00e8s root ou sudo.</li> <li>Les outils UFW et iptables install\u00e9s.</li> <li>Une compr\u00e9hension de base des ports et des protocoles r\u00e9seau.</li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#partie-1-utilisation-de-ufw","title":"Partie 1 : Utilisation de UFW","text":"<p>UFW est une interface simplifi\u00e9e pour g\u00e9rer iptables, con\u00e7ue pour les administrateurs syst\u00e8me novices.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#etape-11-verifier-si-ufw-est-installe","title":"\u00c9tape 1.1 : V\u00e9rifier si UFW est install\u00e9","text":"<p>Ex\u00e9cutez la commande suivante pour v\u00e9rifier si UFW est install\u00e9 :</p> <pre><code>sudo ufw status\n</code></pre> <ul> <li>Si UFW est install\u00e9, vous verrez un statut (par exemple <code>active</code> ou <code>inactive</code>).</li> <li>Sinon, installez-le :   <pre><code>sudo apt update &amp;&amp; sudo apt install ufw\n</code></pre></li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#etape-12-configurer-les-regles-de-base","title":"\u00c9tape 1.2 : Configurer les r\u00e8gles de base","text":"<ol> <li> <p>Autoriser les connexions SSH (indispensable) :    <pre><code>sudo ufw allow ssh\n</code></pre></p> </li> <li> <p>Autoriser ou bloquer des ports sp\u00e9cifiques :    - Autoriser le HTTP (port 80) :      <pre><code>sudo ufw allow 80/tcp\n</code></pre>    - Autoriser le HTTPS (port 443) :      <pre><code>sudo ufw allow 443/tcp\n</code></pre>    - Bloquer un port :      <pre><code>sudo ufw deny 21/tcp\n</code></pre></p> </li> <li> <p>Autoriser un IP ou un r\u00e9seau sp\u00e9cifique :    - Autoriser une IP \u00e0 se connecter \u00e0 tout le serveur :      <pre><code>sudo ufw allow from 192.168.1.100\n</code></pre>    - Autoriser une IP pour un port sp\u00e9cifique :      <pre><code>sudo ufw allow from 192.168.1.100 to any port 22\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#etape-13-activer-ufw","title":"\u00c9tape 1.3 : Activer UFW","text":"<p>Activez UFW pour que les r\u00e8gles prennent effet :</p> <pre><code>sudo ufw enable\n</code></pre> <p>Info</p> <p>Une fois activ\u00e9, toutes les connexions non autoris\u00e9es seront bloqu\u00e9es par d\u00e9faut. Sur WSL la commande peut avoir un comportement \u00e9trange, si une erreur s'affiche mais  qu'en relan\u00e7ant le WSL et en lan\u00e7ant \"ufw status\" vous avez un r\u00e9sultat coh\u00e9rent c'est que la config \u00e0 \u00e9t\u00e9 prise en compte.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#etape-14-tester-la-configuration-ufw-en-local","title":"\u00c9tape 1.4 : Tester la configuration UFW en local","text":"<p>Info</p> <p>Si vous etes sur WSL, ignorez cette partie et allez directement \u00e0 la partie 2, malheureusement le WSL n'est pas un vrai noyaux linux, ce qui rend en r\u00e9alit\u00e9 ufw completement inop\u00e9rant. Ex\u00e9cutez bien \"sudo ufw disable\" pour pouvoir continuer.</p> <ol> <li> <p>V\u00e9rifiez les ports autoris\u00e9s :    Utilisez <code>nmap</code> pour scanner les ports de <code>localhost</code> :    <pre><code>sudo apt install nmap\nnmap localhost\n</code></pre></p> </li> <li> <p>Tester les r\u00e8gles sp\u00e9cifiques :    - Pour tester si le port HTTP (80) est ouvert :      <pre><code>curl http://localhost\n</code></pre>    - Pour tester un port bloqu\u00e9 (par exemple FTP sur 21) :      <pre><code>nc -zv localhost 21\n</code></pre></p> </li> <li> <p>V\u00e9rifiez les logs UFW :    <pre><code>sudo tail -f /var/log/ufw.log\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#partie-2-utilisation-de-iptables","title":"Partie 2 : Utilisation de iptables","text":"<p>iptables offre un contr\u00f4le plus fin sur le filtrage des paquets r\u00e9seau. Cependant, il est plus complexe \u00e0 utiliser.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#etape-21-verifier-si-iptables-est-installe","title":"\u00c9tape 2.1 : V\u00e9rifier si iptables est install\u00e9","text":"<p>Pour v\u00e9rifier si iptables est disponible sur votre syst\u00e8me :</p> <pre><code>sudo iptables -L\n</code></pre> <p>Si la commande retourne des cha\u00eenes de r\u00e8gles (INPUT, FORWARD, OUTPUT), alors iptables est actif.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#etape-22-configurer-des-regles-simples","title":"\u00c9tape 2.2 : Configurer des r\u00e8gles simples","text":"<ol> <li>Bloquer tout le trafic entrant par d\u00e9faut :    <pre><code>sudo iptables -P INPUT DROP\n</code></pre></li> </ol> <p>Info</p> <p>Vous pouvez verifier en tentant de vous reconnecter en ssh</p> <ol> <li> <p>Autoriser le trafic sortant :    <pre><code>sudo iptables -P OUTPUT ACCEPT\n</code></pre></p> </li> <li> <p>Autoriser uniquement SSH :</p> </li> </ol> <p>Si vous etes sur WSL cela ne fonctionnera pas, je vous invite \u00e0 passer directement au 2.3</p> <pre><code>sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT\n</code></pre> <ol> <li>Autoriser un r\u00e9seau sp\u00e9cifique :    <pre><code>sudo iptables -A INPUT -s 192.168.1.0/24 -j ACCEPT\n</code></pre></li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#etape-23-sauvegarder-et-restaurer-les-regles","title":"\u00c9tape 2.3 : Sauvegarder et restaurer les r\u00e8gles","text":"<p>Les modifications d\u2019iptables ne sont pas persistantes par d\u00e9faut. Pour sauvegarder vos r\u00e8gles :</p> <ol> <li> <p>Sauvegarder les r\u00e8gles actuelles :    <pre><code>sudo iptables-save &gt; /etc/iptables.rules\n</code></pre></p> </li> <li> <p>Restaurer les r\u00e8gles au d\u00e9marrage :    <pre><code>iptables-restore &lt; /etc/iptables.rules\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/pare-feu/#etape-24-tester-la-configuration-iptables-en-local","title":"\u00c9tape 2.4 : Tester la configuration iptables en local","text":"<p>Encore une fois si vous etes sur wsl je vous invite \u00e0 simplement lire et prendre connaissance des informations ci-dessous, vous ne pourrez pas tester. Vous pouvez n\u00e9anmoins constater la diff\u00e9rence (nmap et curl) apr\u00e8s avoir execut\u00e9.</p> <pre><code>sudo iptables -P INPUT DROP\n</code></pre> <p>puis </p> <pre><code>sudo iptables -P INPUT ACCEPT\n</code></pre> <ol> <li> <p>V\u00e9rifiez les r\u00e8gles appliqu\u00e9es :    <pre><code>sudo iptables -L -v\n</code></pre></p> </li> <li> <p>Scanner les ports ouverts :    <pre><code>nmap localhost\n</code></pre></p> </li> <li> <p>Tester un port sp\u00e9cifique :    - Pour v\u00e9rifier si le port SSH (22) est accessible :      <pre><code>nc -zv localhost 22\n</code></pre>    - Pour un port bloqu\u00e9, comme le port HTTP si non autoris\u00e9 :      <pre><code>curl http://localhost\n</code></pre></p> </li> <li> <p>V\u00e9rifiez les logs d\u2019iptables :    Ajoutez une r\u00e8gle pour journaliser les paquets rejet\u00e9s :    <pre><code>sudo iptables -A INPUT -j LOG --log-prefix \"IPTables-Dropped: \"\nsudo tail -f /var/log/kern.log\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/","title":"Linux - Configuration et Utilisation de Rsyslog","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#introduction","title":"Introduction","text":"<p>Rsyslog est un d\u00e9mon puissant et flexible pour la gestion des journaux syst\u00e8me sur les serveurs Linux. Il permet de centraliser, d\u2019analyser et de transf\u00e9rer les journaux provenant de diverses applications et syst\u00e8mes. Ce guide explique comment installer, configurer et utiliser Rsyslog efficacement, avec des exemples pratiques.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#pourquoi-utiliser-rsyslog","title":"Pourquoi utiliser Rsyslog ?","text":"<ul> <li>Centralisation des logs : Rsyslog peut regrouper les journaux de plusieurs machines sur un serveur central.</li> <li>Flexibilit\u00e9 : Les journaux peuvent \u00eatre filtr\u00e9s, tri\u00e9s et format\u00e9s.</li> <li>Compatibilit\u00e9 : Supporte divers protocoles (TCP, UDP, RELP) et formats de logs.</li> <li>\u00c9volutivit\u00e9 : G\u00e8re un grand volume de journaux dans des environnements complexes.</li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#partie-1-utilisation-via-docker","title":"Partie 1 : Utilisation via docker","text":"<p>Nous allons maintenant faire un maximum de choses via docker, car pour les \u00e9tudiants sur windows et mac les outils que nous allons voir ne peuvent tout simplement pas fonctionner.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#etape-11-installer-docker-si-non-present-sur-votre-systeme","title":"\u00c9tape 1.1 : Installer docker si non pr\u00e9sent sur votre syst\u00e8me","text":"<p>Je vous invite \u00e0 aller consulter la documentation de docker desktop.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#etape-12-creer-le-fichier-docker-composeyml","title":"\u00c9tape 1.2 : Cr\u00e9er le Fichier docker-compose.yml","text":"<p>Nous allons d\u00e9finir deux services : - Le serveur Rsyslog qui \u00e9coute les logs envoy\u00e9s par les clients. - Un client Rsyslog qui g\u00e9n\u00e8re et envoie ses logs.</p> <p>Cr\u00e9ez un fichier docker-compose.yml : <pre><code>services:\n  rsyslog-server:\n    image: rsyslog/syslog_appliance_alpine\n    container_name: rsyslog-server\n    hostname: rsyslog-server\n    volumes:\n      - ./server/rsyslog.conf:/etc/rsyslog.conf\n      - ./server/logs:/var/log\n    ports:\n      - \"514:514/udp\"\n      - \"514:514/tcp\"\n    networks:\n      - rsyslog-net\n\n  rsyslog-client:\n    image: rsyslog/syslog_appliance_alpine\n    container_name: rsyslog-client\n    hostname: rsyslog-client\n    volumes:\n      - ./client/rsyslog.conf:/etc/rsyslog.conf\n    depends_on:\n      - rsyslog-server\n    networks:\n      - rsyslog-net\n\nnetworks:\n  rsyslog-net:\n</code></pre></p> <p>N'\u00e9xecutez pas ce fichier tout de suite</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#partie-2-configuration-de-base-de-rsyslog","title":"Partie 2 : Configuration de Base de Rsyslog","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#etape-21-configuration-du-serveur-rsyslog","title":"\u00c9tape 2.1 : Configuration du Serveur Rsyslog","text":"<ol> <li>Cr\u00e9ez le dossier pour le serveur Rsyslog :</li> </ol> <pre><code>mkdir -p server/logs\n</code></pre> <ol> <li>Cr\u00e9ez et \u00e9ditez server/rsyslog.conf : <pre><code># /etc/rsyslog.conf configuration file for rsyslog\n#\n# For more information install rsyslog-doc and see\n# /usr/share/doc/rsyslog-doc/html/configuration/index.html\n#\n# Default logging rules can be found in /etc/rsyslog.d/50-default.conf\n\n\n#################\n#### MODULES ####\n#################\n\nmodule(load=\"imuxsock\") # provides support for local system logging\n#module(load=\"immark\")  # provides --MARK-- message capability\n\n# provides UDP syslog reception\n#module(load=\"imudp\")\n#input(type=\"imudp\" port=\"514\")\n\n# provides TCP syslog reception\n#module(load=\"imtcp\")\n#input(type=\"imtcp\" port=\"514\")\n\n# provides kernel logging support and enable non-kernel klog messages\nmodule(load=\"imklog\" permitnonkernelfacility=\"on\")\n\n###########################\n#### GLOBAL DIRECTIVES ####\n###########################\n\n# Filter duplicated messages\n$RepeatedMsgReduction on\n\n#\n# Set the default permissions for all log files.\n#\n$FileOwner syslog\n$FileGroup adm\n$FileCreateMode 0640\n$DirCreateMode 0755\n$Umask 0022\n$PrivDropToUser syslog\n$PrivDropToGroup syslog\n\n#\n# Where to place spool and state files\n#\n$WorkDirectory /var/spool/rsyslog\n\n#\n# Include all config files in /etc/rsyslog.d/\n#\n$IncludeConfig /etc/rsyslog.d/*.conf\n\n#################################\n#### COMMANDES POUR LE COURS ####\n#################################\n\nmodule(load=\"imudp\") # Active UDP\ninput(type=\"imudp\" port=\"514\")\n\nmodule(load=\"imtcp\") # Active TCP\ninput(type=\"imtcp\" port=\"514\")\n\n# Stocker tous les logs re\u00e7us dans un fichier d\u00e9di\u00e9\n*.* /var/log/remote.log\n</code></pre></li> </ol> <p>Je vous invite \u00e0 regarder la partie du bas du fichier. Nous declarons quel ports ecouter et dans quel fichier ecrire.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#etape-22-configuration-du-client-rsyslog","title":"\u00c9tape 2.2 : Configuration du Client Rsyslog","text":"<ol> <li>Cr\u00e9ez le dossier pour le client Rsyslog :</li> </ol> <pre><code>mkdir client\n</code></pre> <ol> <li>Cr\u00e9ez et \u00e9ditez client/rsyslog.conf :</li> </ol> <pre><code># /etc/rsyslog.conf configuration file for rsyslog\n#\n# For more information install rsyslog-doc and see\n# /usr/share/doc/rsyslog-doc/html/configuration/index.html\n#\n# Default logging rules can be found in /etc/rsyslog.d/50-default.conf\n\n\n#################\n#### MODULES ####\n#################\n\nmodule(load=\"imuxsock\") # provides support for local system logging\n#module(load=\"immark\")  # provides --MARK-- message capability\n\n# provides UDP syslog reception\n#module(load=\"imudp\")\n#input(type=\"imudp\" port=\"514\")\n\n# provides TCP syslog reception\n#module(load=\"imtcp\")\n#input(type=\"imtcp\" port=\"514\")\n\n# provides kernel logging support and enable non-kernel klog messages\nmodule(load=\"imklog\" permitnonkernelfacility=\"on\")\n\n###########################\n#### GLOBAL DIRECTIVES ####\n###########################\n\n# Filter duplicated messages\n$RepeatedMsgReduction on\n\n#\n# Set the default permissions for all log files.\n#\n$FileOwner syslog\n$FileGroup adm\n$FileCreateMode 0640\n$DirCreateMode 0755\n$Umask 0022\n$PrivDropToUser syslog\n$PrivDropToGroup syslog\n\n#\n# Where to place spool and state files\n#\n$WorkDirectory /var/spool/rsyslog\n\n#\n# Include all config files in /etc/rsyslog.d/\n#\n$IncludeConfig /etc/rsyslog.d/*.conf\n\n#################################\n#### COMMANDES POUR LE COURS ####\n#################################\n\n*.* @rsyslog-server:514  # Envoie des logs via UDP\n*.* @@rsyslog-server:514 # Envoie des logs via TCP\n</code></pre> <p>Rappel: rsyslog-server est une url, cette derni\u00e8re est le nom du serveur sur le reseau docker, dans la vrai vie cela serait soit une ip soit un nom de domaine.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#partie-3-lancer-les-conteneurs","title":"Partie 3 : Lancer les Conteneurs","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#etape-31-activer-la-reception-des-journaux-distants","title":"\u00c9tape 3.1 : Activer la r\u00e9ception des journaux distants","text":"<ol> <li> <p>D\u00e9marrer l\u2019environnement Docker :    <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>V\u00e9rifier que les conteneurs tournent :    <pre><code>docker ps\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#partie-4-tester-la-configuration","title":"Partie 4 : Tester la Configuration","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#etape-41-generer-un-log-sur-le-client","title":"\u00c9tape 4.1 : G\u00e9n\u00e9rer un Log sur le Client","text":"<ol> <li>Acc\u00e9dez au conteneur client :</li> </ol> <p><pre><code>docker exec -it rsyslog-client sh\n</code></pre> 2. G\u00e9n\u00e9rez un log avec la commande logger :    <pre><code>logger \"Test de log depuis le client Rsyslog\"\n</code></pre></p>"},{"location":"linux/linux/serveur-dedi%C3%A9/rsyslog/#etape-42-verifier-les-logs-sur-le-serveur","title":"\u00c9tape 4.2 : V\u00e9rifier les Logs sur le Serveur","text":"<p>Acc\u00e9dez au conteneur serveur :</p> <pre><code>docker exec -it rsyslog-server sh\n</code></pre> <p>Consultez les logs re\u00e7us :</p> <pre><code>tail -f /var/log/remote.log\n</code></pre> <p>Vous devriez voir appara\u00eetre votre message envoy\u00e9 depuis le client.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/","title":"Linux - Strat\u00e9gies de Sauvegarde dans Linux avec Docker Compose","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#introduction","title":"Introduction","text":"<p>Les sauvegardes sont essentielles pour garantir l'int\u00e9grit\u00e9 des donn\u00e9es et minimiser les pertes en cas de panne, erreur humaine ou cyberattaque. Dans ce cours, nous allons :  </p> <p>\u2705 Mettre en place un environnement Docker avec une base de donn\u00e9es et une application web. \u2705 Configurer un conteneur de sauvegarde permettant d\u2019effectuer des exports et des restaurations. \u2705 Expliquer comment d\u00e9clencher une sauvegarde et une restauration en pratique.  </p>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#partie-1-deploiement-de-lenvironnement","title":"Partie 1 : D\u00e9ploiement de l'Environnement","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#etape-11-creation-du-fichier-docker-composeyml","title":"\u00c9tape 1.1 : Cr\u00e9ation du Fichier <code>docker-compose.yml</code>","text":"<p>Cr\u00e9ez un dossier de projet et acc\u00e9dez-y :</p> <pre><code>mkdir ~/docker-backup &amp;&amp; cd ~/docker-backup\n</code></pre> <p>Cr\u00e9ez un fichier <code>Dockerfile</code> et ajoutez le contenu:</p> <pre><code>FROM php:apache\n\n# Installer l'extension MySQLi\nRUN docker-php-ext-install mysqli\n\n# Activer mod_rewrite (utile pour des frameworks)\nRUN a2enmod rewrite\n</code></pre> <p>Cr\u00e9ez un fichier <code>docker-compose.yml</code> et ajoutez le contenu suivant :</p> <pre><code>version: '3.8'\n\nservices:\n  db:\n    image: mysql:8\n    container_name: db_backup_demo\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpassword\n      MYSQL_DATABASE: demo_db\n      MYSQL_USER: user\n      MYSQL_PASSWORD: userpassword\n    volumes:\n      - db_data:/var/lib/mysql\n\n  app:\n    build: .\n    container_name: php_app\n    restart: always\n    volumes:\n      - ./app:/var/www/html\n    ports:\n      - \"8080:80\"\n\n  backup:\n    image: mysql:8\n    container_name: backup_service\n    volumes:\n      - ./backup:/backup\n    depends_on:\n      - db\n    entrypoint: tail -f /dev/null  # Permet de garder le conteneur actif pour les backups\n\nvolumes:\n  db_data:\n</code></pre>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#etape-12-creation-de-lapplication-web","title":"\u00c9tape 1.2 : Cr\u00e9ation de l'Application Web","text":"<ul> <li>Cr\u00e9ez un dossier <code>app</code> :</li> </ul> <pre><code>mkdir app\n</code></pre> <ul> <li>Ajoutez un fichier <code>index.php</code> dans <code>app/</code> :</li> </ul> <pre><code>nano app/index.php\n</code></pre> <ul> <li>Ajoutez le code suivant (une interface minimale) :</li> </ul> <pre><code>&lt;?php\n$conn = new mysqli(\"db\", \"user\", \"userpassword\", \"demo_db\");\n\nif ($conn-&gt;connect_error) {\n    die(\"\u00c9chec de connexion : \" . $conn-&gt;connect_error);\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $message = $conn-&gt;real_escape_string($_POST[\"message\"]);\n    $conn-&gt;query(\"INSERT INTO messages (content) VALUES ('$message')\");\n}\n\n$result = $conn-&gt;query(\"SELECT * FROM messages\");\n?&gt;\n\n&lt;h1&gt;Messages&lt;/h1&gt;\n&lt;form method=\"POST\"&gt;\n    &lt;input type=\"text\" name=\"message\" required&gt;\n    &lt;button type=\"submit\"&gt;Ajouter&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;ul&gt;\n    &lt;?php while ($row = $result-&gt;fetch_assoc()) { ?&gt;\n        &lt;li&gt;&lt;?php echo htmlspecialchars($row[\"content\"]); ?&gt;&lt;/li&gt;\n    &lt;?php } ?&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#etape-13-lancer-lenvironnement","title":"\u00c9tape 1.3 : Lancer l'Environnement","text":"<p>D\u00e9marrez les services :</p> <pre><code>docker-compose up -d\n</code></pre> <p>Cr\u00e9ez la table MySQL associ\u00e9e :</p> <pre><code>docker exec -it db_backup_demo mysql -u root -prootpassword -e \"CREATE TABLE demo_db.messages (id INT AUTO_INCREMENT PRIMARY KEY, content TEXT);\"\n</code></pre> <p>Acc\u00e9dez \u00e0 l\u2019application dans un navigateur : \ud83d\udc49 http://localhost:8080 </p> <p>Vous pouvez ajouter des messages qui seront stock\u00e9s dans la base de donn\u00e9es.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#partie-2-sauvegarde-et-restauration-de-la-base-de-donnees","title":"Partie 2 : Sauvegarde et Restauration de la Base de Donn\u00e9es","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#etape-21-effectuer-une-sauvegarde","title":"\u00c9tape 2.1 : Effectuer une Sauvegarde","text":"<ul> <li>Lancez une sauvegarde avec <code>mysqldump</code> :</li> </ul> <pre><code>docker exec backup_service mysqldump -h db -u root -prootpassword --databases demo_db &gt; backup/db_backup.sql\n</code></pre> <ul> <li>V\u00e9rifiez le fichier g\u00e9n\u00e9r\u00e9 :</li> </ul> <pre><code>ls -lh backup/\n</code></pre> <p>Info</p> <p>Le fichier <code>db_backup.sql</code> contient toutes les tables et donn\u00e9es de <code>demo_db</code>.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#etape-22-simuler-une-perte-de-donnees","title":"\u00c9tape 2.2 : Simuler une Perte de Donn\u00e9es","text":"<ul> <li>Supprimez toutes les donn\u00e9es de la table :</li> </ul> <pre><code>docker exec -it db_backup_demo mysql -h db -u root -prootpassword -e \"DELETE FROM demo_db.messages;\"\n</code></pre> <ul> <li>V\u00e9rifiez que la base est vide :</li> </ul> <pre><code>docker exec -it db_backup_demo mysql -h db -u root -prootpassword -e \"SELECT * FROM demo_db.messages;\"\n</code></pre> <p>Info</p> <p>\u00c0 ce stade, la base est vide et les messages ne s'afficheront plus dans l\u2019application.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#etape-23-restaurer-la-base-de-donnees","title":"\u00c9tape 2.3 : Restaurer la Base de Donn\u00e9es","text":"<ul> <li>Restaurez la base de donn\u00e9es avec le fichier de sauvegarde :</li> </ul> <pre><code>docker exec -i db_backup_demo mysql -h db -u root -prootpassword &lt; backup/db_backup.sql\n</code></pre> <ul> <li>V\u00e9rifiez que les donn\u00e9es sont restaur\u00e9es :</li> </ul> <pre><code>docker exec -it db_backup_demo mysql -h db -u root -prootpassword -e \"SELECT * FROM demo_db.messages;\"\n</code></pre> <p>Info</p> <p>Les messages doivent r\u00e9appara\u00eetre dans la base et sur l\u2019application web.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#partie-3-automatiser-les-sauvegardes","title":"Partie 3 : Automatiser les Sauvegardes","text":"<p>Vous pouvez planifier une sauvegarde automatique avec cron.  </p> <ul> <li>Ouvrez le fichier crontab :</li> </ul> <pre><code>crontab -e\n</code></pre> <ul> <li>Ajoutez la ligne suivante pour ex\u00e9cuter une sauvegarde toutes les 12 heures :</li> </ul> <pre><code>0 */12 * * * docker exec backup_service mysqldump -u root -prootpassword --databases demo_db &gt; backup/db_backup.sql\n</code></pre> <p>Info</p> <p>Cette t\u00e2che enregistrera une copie de la base de donn\u00e9es deux fois par jour.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/sauvegardes/#exercice-pratique","title":"Exercice Pratique","text":"<ol> <li>Ajoutez un conteneur qui cr\u00e9\u00e9 un backup toute les minutes et constatez sa bonne execution</li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/","title":"Linux - S\u00e9curisation des Services avec Fail2ban et PortSentry","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/services/#introduction","title":"Introduction","text":"<p>La s\u00e9curit\u00e9 des serveurs est essentielle dans un environnement connect\u00e9. Fail2ban et PortSentry sont deux outils compl\u00e9mentaires permettant de renforcer la d\u00e9fense contre les attaques courantes. Ce guide explique leur r\u00f4le, leur fonctionnement et leur configuration.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#pourquoi-utiliser-fail2ban-et-portsentry","title":"Pourquoi utiliser Fail2ban et PortSentry ?","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/services/#fail2ban","title":"Fail2ban","text":"<p>Fail2ban surveille les journaux de votre serveur pour d\u00e9tecter des comportements suspects comme des tentatives r\u00e9p\u00e9t\u00e9es de connexion (attaques par force brute). Lorsqu'une activit\u00e9 malveillante est d\u00e9tect\u00e9e, Fail2ban bloque temporairement l'IP fautive en configurant automatiquement le pare-feu.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#avantages-de-fail2ban","title":"Avantages de Fail2ban :","text":"<ul> <li>Prot\u00e8ge les services sp\u00e9cifiques (ex. SSH, HTTP, FTP).</li> <li>R\u00e9duit les risques d'acc\u00e8s non autoris\u00e9s par force brute.</li> <li>Flexible gr\u00e2ce \u00e0 ses filtres personnalisables.</li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#portsentry","title":"PortSentry","text":"<p>PortSentry est con\u00e7u pour d\u00e9tecter les scans de ports, une technique utilis\u00e9e par les attaquants pour identifier les services actifs sur un serveur. Lorsqu'un scan est d\u00e9tect\u00e9, PortSentry bloque imm\u00e9diatement l'IP suspecte via le pare-feu ou d'autres m\u00e9thodes.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#avantages-de-portsentry","title":"Avantages de PortSentry :","text":"<ul> <li>D\u00e9tecte et bloque les attaques en amont.</li> <li>Compl\u00e8te Fail2ban en s\u00e9curisant les services \"non expos\u00e9s\".</li> <li>Agit en mode pr\u00e9ventif contre les tentatives de reconnaissance.</li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#partie-1-installation-et-configuration-de-fail2ban","title":"Partie 1 : Installation et Configuration de Fail2ban","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/services/#etape-11-installation-de-fail2ban","title":"\u00c9tape 1.1 : Installation de Fail2ban","text":"<ol> <li> <p>Installer Fail2ban :    Utilisez le gestionnaire de paquets de votre distribution :    <pre><code># Ubuntu/Debian\nsudo apt update &amp;&amp; sudo apt install fail2ban\n\n# CentOS/RedHat\nsudo yum install fail2ban\n\n# SUSE\nsudo zypper install fail2ban\n</code></pre></p> </li> <li> <p>V\u00e9rifiez que Fail2ban est install\u00e9 et actif :    <pre><code>sudo systemctl status fail2ban\n</code></pre></p> </li> </ol> <p>Pour WSL</p> <pre><code>sudo service fail2ban status\nsudo service fail2ban start\nsudo service fail2ban status\n</code></pre>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#etape-12-configurer-fail2ban","title":"\u00c9tape 1.2 : Configurer Fail2ban","text":"<p>Fail2ban utilise des jails (prisons) pour d\u00e9finir des r\u00e8gles sp\u00e9cifiques \u00e0 chaque service.</p> <ol> <li> <p>Cr\u00e9er un fichier de configuration local :    <pre><code>sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\n</code></pre></p> </li> <li> <p>Configurer les options g\u00e9n\u00e9rales :    - Ouvrez le fichier <code>/etc/fail2ban/jail.local</code> :      <pre><code>sudo nano /etc/fail2ban/jail.local\n</code></pre>    - Modifiez les param\u00e8tres principaux :      <pre><code>bantime = 1m             # Dur\u00e9e du bannissement\nmaxretry = 3               # Nombre de tentatives avant le bannissement\n</code></pre></p> </li> <li> <p>Activer la protection pour SSH :    Recherchez la section <code>[sshd]</code> et configurez-la ainsi :    <pre><code>[sshd]\nenabled = true\nport = ssh\nlogpath = /var/log/auth.log\nmaxretry = 3\n</code></pre></p> </li> <li> <p>Cr\u00e9er le fichier de logs <pre><code>sudo touch /var/log/auth.log\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#etape-13-tester-fail2ban","title":"\u00c9tape 1.3 : Tester Fail2ban","text":"<ol> <li> <p>Red\u00e9marrez Fail2ban pour appliquer les modifications :    <pre><code>sudo systemctl restart fail2ban\n</code></pre> Pour WSL    <pre><code>sudo service fail2ban restart \n</code></pre></p> </li> <li> <p>Simulez une attaque par force brute sur SSH :    - Essayez de vous connecter avec un mot de passe incorrect :      <pre><code>ssh invalid_user@localhost\n</code></pre>    - Apr\u00e8s plusieurs tentatives \u00e9chou\u00e9es (selon <code>maxretry</code>), votre IP sera bannie.    - Selon votre syst\u00e8me (surtout WSL...) cela peut ne ps fonctionner. Dans ce cas l\u00e0 passez \u00e0 PortSentry.</p> </li> <li> <p>V\u00e9rifiez les IP bannies :    <pre><code>sudo fail2ban-client status sshd\n</code></pre></p> </li> <li> <p>D\u00e9bannir une IP (si n\u00e9cessaire) :    <pre><code>sudo fail2ban-client unban &lt;IP&gt;\n</code></pre></p> </li> </ol> <p>Info</p> <p>Si vous vous bannissez par erreur, utilisez une autre session pour d\u00e9bannir votre IP.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#partie-2-installation-et-configuration-de-portsentry","title":"Partie 2 : Installation et Configuration de PortSentry","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/services/#etape-21-installation-de-portsentry","title":"\u00c9tape 2.1 : Installation de PortSentry","text":"<ol> <li> <p>Installer PortSentry :    <pre><code># Ubuntu/Debian\nsudo apt update &amp;&amp; sudo apt install portsentry\n\n# CentOS/RedHat (via EPEL)\nsudo yum install portsentry\n\n# SUSE\nsudo zypper install portsentry\n</code></pre></p> </li> <li> <p>V\u00e9rifiez l\u2019installation :    <pre><code>sudo portsentry -version\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#etape-22-configurer-portsentry","title":"\u00c9tape 2.2 : Configurer PortSentry","text":"<ol> <li> <p>Modifier le fichier de configuration principal : <pre><code>sudo nano /etc/portsentry/portsentry.conf\n</code></pre></p> </li> <li> <p>Configurer les ports surveill\u00e9s :    Modifiez ou ajoutez une liste personnalis\u00e9e de ports :    <pre><code>TCP_PORTS=\"1,11,15,23,79,81,443,1080\"\nUDP_PORTS=\"1,7,9,69,135,137,161,500\"\n</code></pre></p> </li> <li> <p>Activer le mode Stealth :    Le mode Stealth d\u00e9tecte les scans furtifs et r\u00e9agit en bloquant l'IP :    <pre><code>BLOCK_UDP=\"1\"\nBLOCK_TCP=\"1\"\n</code></pre></p> </li> <li> <p>Permettre le blocage de localhost pour les besoins du tp <pre><code>sudo nano /etc/portsentry/portsentry.ignore\nsudo nano /etc/portsentry/portsentry.ignore.static\n</code></pre>    Supprimez les lignes de ces fichiers.</p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#etape-23-tester-portsentry","title":"\u00c9tape 2.3 : Tester PortSentry","text":"<ol> <li> <p>D\u00e9marrez PortSentry :    <pre><code>sudo service portsentry start \n</code></pre></p> </li> <li> <p>Simulez une tentative de scan de port :    Utilisez <code>nmap</code> pour scanner les ports :    <pre><code>nmap localhost\n</code></pre></p> </li> <li> <p>Si PortSentry est actif, il d\u00e9tectera le scan et bloquera l'IP.</p> </li> <li> <p>V\u00e9rifiez les r\u00e8gles iptables ajout\u00e9es :    <pre><code>sudo iptables -L -v\n</code></pre>    Cela ne fonctionne pas sur tout les syst\u00e8mes, WSL en t\u00eate. vous pouvez n\u00e9anmoins v\u00e9rifier que le scan a \u00e9t\u00e9 d\u00e9tect\u00e9 de cette mani\u00e8re:    <pre><code> sudo cat /etc/hosts.deny\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/services/#etape-24-debannir-une-ip-dans-portsentry","title":"\u00c9tape 2.4 : D\u00e9bannir une IP dans PortSentry","text":"<p>Lorsque PortSentry bannit une IP, elle est ajout\u00e9e aux r\u00e8gles iptables ou au fichier <code>hosts.deny</code>.</p> <ol> <li> <p>D\u00e9bannir une IP dans iptables :    <pre><code>sudo iptables -D INPUT -s &lt;IP_BANNEE&gt; -j DROP\n</code></pre></p> </li> <li> <p>Supprimer une IP bannie dans <code>/etc/hosts.deny</code> (si configur\u00e9) :    - Ouvrez le fichier :      <pre><code>sudo nano /etc/hosts.deny\n</code></pre>    - Recherchez et supprimez la ligne contenant l'IP bannie.</p> </li> <li> <p>Red\u00e9marrez PortSentry :    <pre><code>sudo systemctl restart portsentry\n</code></pre></p> </li> </ol> <p>Info</p> <p>D\u00e9bannir manuellement une IP peut \u00eatre n\u00e9cessaire si vous bloquez accidentellement une adresse autoris\u00e9e, comme localhost.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/","title":"Linux - Configuration de ssh","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/#introduction","title":"Introduction","text":"<p>Ce guide vous accompagne pas \u00e0 pas dans la configuration de SSH sur un serveur Linux et dans sa validation en local (via <code>localhost</code>).</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>Une machine Linux (ex. Ubuntu, Debian, SUSE, CentOS).</li> <li>Les privil\u00e8ges root ou acc\u00e8s sudo.</li> <li>OpenSSH install\u00e9 (client et serveur).</li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/#etape-1-verifier-si-ssh-est-installe","title":"\u00c9tape 1 : V\u00e9rifier si SSH est install\u00e9","text":"<p>Ex\u00e9cutez la commande suivante pour v\u00e9rifier si SSH est install\u00e9 :</p> <pre><code>sudo systemctl status ssh\n</code></pre> <ul> <li>Si SSH est install\u00e9, vous verrez un statut indiquant <code>active (running)</code>.</li> <li>Si SSH n'est pas install\u00e9, installez-le avec :   <pre><code># Pour les distributions bas\u00e9es sur Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt install openssh-server\n\n# Pour les distributions bas\u00e9es sur RedHat/CentOS\nsudo yum install openssh-server\n\n# Pour les distributions bas\u00e9es sur SUSE\nsudo zypper install openssh\n</code></pre></li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/#etape-2-configuration-du-serveur-ssh","title":"\u00c9tape 2 : Configuration du Serveur SSH","text":"<p>Le fichier de configuration principal de SSH se trouve dans <code>/etc/ssh/sshd_config</code>. </p> <ol> <li> <p>Ouvrir le fichier de configuration :    <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre></p> </li> <li> <p>V\u00e9rifiez et modifiez les param\u00e8tres essentiels :</p> </li> <li>Changer le port SSH (optionnel) :      Remplacez <code>#Port 22</code> par un autre num\u00e9ro, par exemple <code>Port 2222</code>. Cela ajoute une couche de s\u00e9curit\u00e9.</li> <li>Autoriser uniquement SSH v2 (plus s\u00e9curis\u00e9) :      Assurez-vous que <code>Protocol 2</code> est activ\u00e9.</li> <li>Restreindre les connexions root :      Remplacez <code>PermitRootLogin yes</code> par <code>PermitRootLogin no</code> pour emp\u00eacher les connexions root.</li> <li> <p>Limiter les utilisateurs autoris\u00e9s (optionnel) :      Ajoutez <code>AllowUsers &lt;utilisateur&gt;</code> pour restreindre l'acc\u00e8s \u00e0 certains utilisateurs.</p> </li> <li> <p>Sauvegardez et fermez le fichier.</p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/#etape-3-redemarrer-le-service-ssh","title":"\u00c9tape 3 : Red\u00e9marrer le Service SSH","text":"<p>Pour appliquer les modifications, red\u00e9marrez le service SSH :</p> <pre><code>sudo systemctl restart ssh\n</code></pre> <p>SUR WSL <pre><code>sudo service ssh restart\n</code></pre></p>"},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/#etape-4-tester-la-configuration-ssh-en-local","title":"\u00c9tape 4 : Tester la Configuration SSH en Local","text":"<p>Pour tester la configuration, nous utiliserons <code>localhost</code>.</p> <ol> <li>V\u00e9rifier le port d'\u00e9coute :    <pre><code>sudo netstat -tuln | grep ssh\n</code></pre></li> </ol> <p>Info</p> <p>La commande ci-dessus vous montre si SSH \u00e9coute sur le port configur\u00e9 (par d\u00e9faut <code>22</code> ou celui d\u00e9fini).</p> <ol> <li> <p>Tester une connexion SSH locale :    <pre><code>ssh &lt;votre_utilisateur&gt;@localhost\n</code></pre>    Remplacez <code>&lt;votre_utilisateur&gt;</code> par votre nom d'utilisateur. Vous devriez \u00eatre invit\u00e9 \u00e0 entrer un mot de passe.</p> </li> <li> <p>Tester un autre port (si configur\u00e9) :    <pre><code>ssh -p 2222 &lt;votre_utilisateur&gt;@localhost\n</code></pre></p> </li> </ol> <p>Info</p> <p>Si vous avez chang\u00e9 le port dans <code>/etc/ssh/sshd_config</code>, cette commande v\u00e9rifie que la connexion fonctionne correctement.</p> <ol> <li>V\u00e9rification des logs :    Si un probl\u00e8me survient, consultez les logs du service SSH :    <pre><code>sudo journalctl -u ssh\n</code></pre></li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/#etape-5-configuration-des-cles-ssh","title":"\u00c9tape 5 : Configuration des Cl\u00e9s SSH","text":"<ol> <li> <p>G\u00e9n\u00e9rer une paire de cl\u00e9s SSH :    Ex\u00e9cutez la commande suivante en tant qu'utilisateur :    <pre><code>ssh-keygen -t rsa -b 4096\n</code></pre>    Suivez les instructions pour sauvegarder la cl\u00e9 dans le fichier par d\u00e9faut (<code>~/.ssh/id_rsa</code>).</p> </li> <li> <p>Copier la cl\u00e9 publique sur le serveur (local) :    <pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub &lt;votre_utilisateur&gt;@localhost\n</code></pre>    Cela ajoute votre cl\u00e9 publique au fichier <code>~/.ssh/authorized_keys</code>.</p> </li> <li> <p>Tester la connexion par cl\u00e9 SSH :    <pre><code>ssh &lt;votre_utilisateur&gt;@localhost\n</code></pre></p> </li> </ol> <p>Info</p> <p>Si configur\u00e9 correctement, la connexion devrait s'\u00e9tablir sans demander de mot de passe.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/ssh/#etape-6-desactiver-lauthentification-par-mot-de-passe","title":"\u00c9tape 6 : D\u00e9sactiver l'Authentification par Mot de Passe","text":"<p>Pour renforcer la s\u00e9curit\u00e9, d\u00e9sactivez l'authentification par mot de passe apr\u00e8s avoir configur\u00e9 les cl\u00e9s SSH.</p> <ol> <li> <p>Modifier le fichier de configuration :    <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre>    Recherchez et modifiez la ligne suivante :    <pre><code>PasswordAuthentication no\n</code></pre></p> </li> <li> <p>Red\u00e9marrer SSH :    <pre><code>sudo systemctl restart ssh\n</code></pre></p> </li> <li> <p>Tester la connexion :    <pre><code>ssh &lt;votre_utilisateur&gt;@localhost\n</code></pre></p> </li> </ol> <p>Info</p> <p>Si tout est configur\u00e9 correctement, seul l'acc\u00e8s par cl\u00e9 SSH sera autoris\u00e9. essayez de vous connecter avec un autre utilisateur pour le constater.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/","title":"Linux - Surveillance des Conteneurs Docker avec Zabbix","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#introduction","title":"Introduction","text":"<p>Zabbix est un puissant syst\u00e8me de surveillance open-source permettant de suivre la disponibilit\u00e9, les performances et l'int\u00e9grit\u00e9 de vos syst\u00e8mes et applications. Dans ce tutoriel, nous allons utiliser Docker Compose pour d\u00e9ployer une instance de Zabbix et surveiller un conteneur ex\u00e9cutant un petit service. L'objectif est de comprendre comment configurer Zabbix pour surveiller un conteneur et interpr\u00e9ter les r\u00e9sultats lorsqu'il est up (actif) ou down (inactif).</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#partie-1-installation-de-zabbix-avec-docker-compose","title":"Partie 1 : Installation de Zabbix avec Docker Compose","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#etape-11-creer-le-fichier-docker-composeyml","title":"\u00c9tape 1.1 : Cr\u00e9er le fichier <code>docker-compose.yml</code>","text":"<ol> <li> <p>Cr\u00e9ez un r\u00e9pertoire pour votre projet Zabbix :    <pre><code>mkdir zabbix-docker\ncd zabbix-docker\n</code></pre></p> </li> <li> <p>Cr\u00e9ez un fichier <code>docker-compose.yml</code> dans ce r\u00e9pertoire :   <pre><code>services:\n  postgresql-server:\n    image: postgres:latest\n    container_name: postgresql-server\n    restart: unless-stopped\n    environment:\n      POSTGRES_USER: zabbix\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: zabbix\n    volumes:\n      - postgresql-data:/var/lib/postgresql/data\n\n  zabbix-server:\n    image: zabbix/zabbix-server-pgsql:latest\n    container_name: zabbix-server\n    restart: unless-stopped\n    depends_on:\n      - postgresql-server\n    environment:\n      DB_SERVER_HOST: postgresql-server\n      POSTGRES_USER: zabbix\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: zabbix\n    ports:\n      - \"10051:10051\"\n    volumes:\n      - zabbix-server-data:/var/lib/zabbix\n      - zabbix-snmptraps-data:/var/lib/zabbix/snmptraps\n      - zabbix-export-data:/var/lib/zabbix/export\n\n  zabbix-web-nginx-pgsql:\n    image: zabbix/zabbix-web-nginx-pgsql:latest\n    container_name: zabbix-web\n    restart: unless-stopped\n    depends_on:\n      - postgresql-server\n      - zabbix-server\n    environment:\n      DB_SERVER_HOST: postgresql-server\n      POSTGRES_USER: zabbix\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: zabbix\n      ZBX_SERVER_HOST: zabbix-server\n      PHP_TZ: Europe/London\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - zabbix-web-data:/usr/share/zabbix\n\n  zabbix-agent:\n    image: zabbix/zabbix-agent:latest\n    container_name: zabbix-agent\n    restart: unless-stopped\n    depends_on:\n      - zabbix-server\n    environment:\n      ZBX_HOSTNAME: \"zabbix-server\"\n      ZBX_SERVER_HOST: zabbix-server\n      ZBX_SERVER_PORT: '10051'\n      ZBX_SERVER_ACTIVE: zabbix-server\n    expose:\n      - 10050\n\n  my-app:\n    image: nginx:alpine\n    container_name: my-app\n    ports:\n      - \"8081:80\"\n\n\nvolumes:\n  postgresql-data:\n  zabbix-server-data:\n  zabbix-snmptraps-data:\n  zabbix-export-data:\n  zabbix-web-data:\n</code></pre></p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#etape-12-lancer-zabbix-avec-docker-compose","title":"\u00c9tape 1.2 : Lancer Zabbix avec Docker Compose","text":"<ol> <li> <p>D\u00e9marrez les conteneurs avec Docker Compose :    <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>V\u00e9rifiez que les conteneurs sont en cours d'ex\u00e9cution :    <pre><code>docker ps\n</code></pre></p> </li> </ol> <p>Vous devriez voir les conteneurs suivants : <code>zabbix-server</code>, <code>zabbix-web</code>, <code>zabbix-db</code>, et <code>my-app</code>.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#partie-2-acceder-a-linterface-web-de-zabbix","title":"Partie 2 : Acc\u00e9der \u00e0 l'Interface Web de Zabbix","text":"<ol> <li> <p>Ouvrez votre navigateur et acc\u00e9dez \u00e0 l'interface web de Zabbix via l'URL suivante :    <pre><code>http://localhost:8080\n</code></pre></p> </li> <li> <p>Connectez-vous avec les identifiants par d\u00e9faut :    - Utilisateur : <code>Admin</code>    - Mot de passe : <code>zabbix</code> </p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#partie-3-ajouter-un-hote-conteneur-a-zabbix","title":"Partie 3 : Ajouter un H\u00f4te (Conteneur) \u00e0 Zabbix","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#etape-31-monitorer-lhost","title":"\u00c9tape 3.1 : Monitorer l'host","text":"<p>Nous allons d\u00e9j\u00e0 commencer par nous monitorer nous m\u00eame. Cela est sens\u00e9 \u00eatre natif, mais comme nous passons par docker nous avons une petite modification \u00e0 faire. 1. Allez dans Monitoring -&gt; Hosts et cliquez sur Zabbix-server -&gt; Host (sous configuration) 2. Dans Agent enlevez l'ip et mettez dans DNS name <code>zabbix-agent</code> (le dns docker de notre agent). 3. Passez le Connect to \u00e0 <code>DNS</code>. 4. Cliquez sur Update. 5. Attendez une minute et verifiez dans Dashboard</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#etape-32-creer-le-template-de-monitoring","title":"\u00c9tape 3.2 : Cr\u00e9er le template de monitoring","text":"<p>Zabbix fonctionne par template. Par defaut vous en avez une grande quantit\u00e9 disponible, par exemple nous pourrions utiliser celui de nginx et suivre les guideline du template pour que note nginx puisse remonter des metrics \u00e0 zabbix. Ici nous allons \u00e0 l'inverse cr\u00e9\u00e9 un template tr\u00e8s simple pour verifier si le conteneur r\u00e9pond en <code>HTTP</code>.</p> <ol> <li>Allez dans Data collection -&gt; Templates et cliquez sur Create template.</li> <li> <p>Remplissez les champs comme suit :    - Template name : <code>Template App HTTP</code>    - Template groups : <code>Templates</code> (celui par defaut)  </p> </li> <li> <p>Appuyez sur <code>Add</code></p> </li> <li>Cherchez votre template nouvellement cr\u00e9\u00e9 via le syst\u00e8me de filtre et cliquez sur Items</li> <li>Appuyez sur Create Item</li> <li>Remplissez les champs comme suit :    - Name : <code>HTTP Check</code>    - Type : <code>HTTP agent</code> (celui par defaut)    - Key: web.page.get    - Type of information: Text    - URL: my-app:80  </li> <li>Vous pouvez tester la bonne execution grace au bouton Test puis vous pouvez sauvegarder l'item.</li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#etape-33-ajouter-le-conteneur-a-zabbix","title":"\u00c9tape 3.3 : Ajouter le Conteneur \u00e0 Zabbix","text":"<ol> <li>Allez dans Monitoring -&gt; Hosts et cliquez sur Create host.</li> <li> <p>Remplissez les champs comme suit :    - Host name : <code>my-app</code>    - Groups : Vous pouvez cr\u00e9er un groupe \"Docker\" ou utiliser \"Linux servers\".    - Template : <code>Template App HTTP</code> </p> </li> <li> <p>Cliquez sur Add pour enregistrer l'h\u00f4te.</p> </li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#etape-33-ajouter-un-trigger","title":"\u00c9tape 3.3 : Ajouter un trigger","text":"<ol> <li>Allez dans Monitoring -&gt; Hosts et s\u00e9l\u00e9ctionnez <code>my-app</code></li> <li>Cliquez sur Triggers</li> <li>Cliquez sur Create trigger</li> <li>Remplissez les champs comme suit :    - Name : <code>my-app trigger</code>    - Severity: <code>High</code>    - Expression : <code>nodata(/my-app/web.page.get,10)=1</code> (Nous verifions si nous avons de la donn\u00e9e depuis les 10 derni\u00e8res secondes)  </li> <li>Cliquez sur Add</li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#partie-4-verifier-le-statut-du-conteneur","title":"Partie 4 : V\u00e9rifier le Statut du Conteneur","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#etape-41-acceder-aux-donnees-de-surveillance","title":"\u00c9tape 4.1 : Acc\u00e9der aux Donn\u00e9es de Surveillance","text":"<ol> <li>Allez dans Monitoring -&gt; Latest data.</li> <li>S\u00e9lectionnez l'h\u00f4te <code>my-app</code> et vous verrez des m\u00e9triques telles que l'\u00e9tat du service HTTP et la disponibilit\u00e9 de l'application.</li> </ol>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#etape-42-resultats-attendus","title":"\u00c9tape 4.2 : R\u00e9sultats Attendus","text":"<ul> <li> <p>Quand le conteneur est UP (actif) :   - De la donn\u00e9e cot\u00e9 latest data et aucun probl\u00e8mes  </p> </li> <li> <p>Quand le conteneur est DOWN (inactif) :   - Un probl\u00e8me doit etre visible dans le dashboard principal  </p> </li> </ul>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#partie-5-les-notifications-zabbix","title":"Partie 5 : les Notifications Zabbix","text":"<p>Nous n'allons pas couvrir cette partie dans le cours car nous ne sommes pas \u00e9quiper pour, mais sachez qu'en entreprise vous pourriez envoyer des mails via un serveur smtp par exemple.</p>"},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#exercice-pratique","title":"Exercice Pratique","text":""},{"location":"linux/linux/serveur-dedi%C3%A9/surveillance/#objectif-configurer-un-nouveau-service-a-surveiller-dans-un-autre-conteneur-docker","title":"Objectif : Configurer un nouveau service \u00e0 surveiller dans un autre conteneur Docker","text":"<ol> <li>Cr\u00e9ez un nouveau service Docker \u00e0 surveiller (par exemple, un serveur Apache ou Redis).</li> <li>Ajoutez ce nouveau conteneur \u00e0 Zabbix comme un h\u00f4te.</li> <li>Configurez un template pertinent pour ce service (par exemple, Template App Redis pour Redis ou Template App HTTP pour Apache).</li> <li>Testez la surveillance de ce service en d\u00e9marrant et en arr\u00eatant le conteneur.</li> </ol>"}]}